###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         06/Jan/2021  10:23:43 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\ZMain\TI2530DB\ZMain.c        #
#    Command line       =  -f C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3. #
#                          0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ  #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0    #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\ZMain\TI2530DB\ZMain.c -D     #
#                          ZIGBEEPRO -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC  #
#                          -D xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC         #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\Co #
#                          ordinatorEB-Pro\List\ -lA                          #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\Co #
#                          ordinatorEB-Pro\List\ --diag_suppress Pe001,Pa010  #
#                          -o C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3. #
#                          0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \CoordinatorEB-Pro\Obj\ -e --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\小安\Desktop\GAS_ #
#                          ED\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\ -I                          #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \SOURCE\ -I C:\Users\小安\Desktop\GAS_ED\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I              #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\MT\ -I                     #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\AF\ -I               #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\NWK\ -I              #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\SEC\ -I              #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\SAPI\ -I             #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\SYS\ -I              #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\ZDO\ -I              #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\ZMAC\F8W\ -I               #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\ZMAC\ -I                   #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I         #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I            #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I    #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE #
#                          _CHIP\ -Ohz --require_prototypes                   #
#    List file          =  C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\Co #
#                          ordinatorEB-Pro\List\ZMain.lst                     #
#    Object file        =  C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\Co #
#                          ordinatorEB-Pro\Obj\ZMain.r51                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          #include "ZComDef.h"
      2          #include "OSAL.h"
      3          #include "OSAL_Nv.h"
      4          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
      5          #include "ZMAC.h"
      6          
      7          #ifndef NONWK
      8            #include "AF.h"
      9          #endif
     10          
     11          /* Hal */
     12          #include "hal_lcd.h"
     13          #include "hal_led.h"
     14          #include "hal_adc.h"
     15          #include "hal_drivers.h"
     16          #include "hal_assert.h"
     17          #include "hal_flash.h"
     18          
     19          /*********************************************************************
     20           * MACROS
     21           */
     22          
     23          /*********************************************************************
     24           * CONSTANTS
     25           */
     26          
     27          // Maximun number of Vdd samples checked before go on
     28          #define MAX_VDD_SAMPLES  3
     29          #define ZMAIN_VDD_LIMIT  HAL_ADC_VDD_LIMIT_4
     30          #define BEEP_DATA P1_4
     31          
     32          /*********************************************************************
     33           * TYPEDEFS
     34           */
     35          
     36          /*********************************************************************
     37           * GLOBAL VARIABLES
     38           */
     39          
     40          /*********************************************************************
     41           * EXTERNAL VARIABLES
     42           */
     43          
     44          /*********************************************************************
     45           * EXTERNAL FUNCTIONS
     46           */
     47          
     48          extern bool HalAdcCheckVdd (uint8 limit);
     49          
     50          /*********************************************************************
     51           * LOCAL VARIABLES
     52           */
     53          
     54          /*********************************************************************
     55           * LOCAL FUNCTIONS
     56           */
     57          
     58          static void zmain_dev_info( void );
     59          static void zmain_ext_addr( void );
     60          static void zmain_vdd_check( void );
     61          void Pin_init(void);
     62          
     63          #ifdef LCD_SUPPORTED
     64          static void zmain_lcd_init( void );
     65          #endif
     66          
     67          /*********************************************************************
     68           * @fn      main
     69           * @brief   First function called after startup.
     70           * @return  don't care
     71           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     72          int main( void )
   \                     main:
     73          {
   \   000000                ; Auto size: 0
     74            Pin_init();
   \   000000   75FEFF       MOV     0xfe,#-0x1
     75            // Turn off interrupts
     76            osal_int_disable( INTS_ALL );
   \   000003                ; Setup parameters for call to function osal_int_disable
   \   000003   79FF         MOV     R1,#-0x1
   \   000005   12....       LCALL   ??osal_int_disable?relay
     77          
     78            // Initialization for board related stuff such as LEDs
     79            HAL_BOARD_INIT();
   \   000008   53BEFB       ANL     0xbe,#0xfb
   \                     ??main_0:
   \   00000B   E59D         MOV     A,0x9d
   \   00000D   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000F   50FA         JNC     ??main_0
   \   000011   00           NOP
   \   000012   78F8         MOV     R0,#-0x8
   \   000014   7901         MOV     R1,#0x1
   \                     ??main_1:
   \   000016   00           NOP
   \   000017   E8           MOV     A,R0
   \   000018   24FF         ADD     A,#-0x1
   \   00001A   18           DEC     R0
   \   00001B   E9           MOV     A,R1
   \   00001C   34FF         ADDC    A,#-0x1
   \   00001E   F9           MOV     R1,A
   \   00001F   E8           MOV     A,R0
   \   000020   49           ORL     A,R1
   \   000021   70F3         JNZ     ??main_1
   \   000023   75C600       MOV     0xc6,#0x0
   \                     ??main_2:
   \   000026   E59E         MOV     A,0x9e
   \   000028   70FC         JNZ     ??main_2
   \   00002A   43BE04       ORL     0xbe,#0x4
   \   00002D   906270       MOV     DPTR,#0x6270
   \   000030   7408         MOV     A,#0x8
   \   000032   F0           MOVX    @DPTR,A
   \   000033   43FE01       ORL     0xfe,#0x1
   \   000036   43FE02       ORL     0xfe,#0x2
   \   000039   43FE10       ORL     0xfe,#0x10
   \   00003C   438F01       ORL     0x8f,#0x1
     80          
     81            // Make sure supply voltage is high enough to run
     82            zmain_vdd_check();
   \   00003F                ; Setup parameters for call to function zmain_vdd_check
   \   00003F   12....       LCALL   ??zmain_vdd_check?relay
     83          
     84            // Initialize board I/O
     85            InitBoard( OB_COLD );
   \   000042                ; Setup parameters for call to function InitBoard
   \   000042   7900         MOV     R1,#0x0
   \   000044   12....       LCALL   ??InitBoard?relay
     86          
     87            // Initialze HAL drivers
     88            HalDriverInit();
   \   000047                ; Setup parameters for call to function HalDriverInit
   \   000047   12....       LCALL   ??HalDriverInit?relay
     89          
     90            // Initialize NV System
     91            osal_nv_init( NULL );
   \   00004A                ; Setup parameters for call to function osal_nv_init
   \   00004A   7A00         MOV     R2,#0x0
   \   00004C   7B00         MOV     R3,#0x0
   \   00004E   12....       LCALL   ??osal_nv_init?relay
     92          
     93            // Initialize the MAC
     94            ZMacInit();
   \   000051                ; Setup parameters for call to function ZMacInit
   \   000051   12....       LCALL   ??ZMacInit?relay
     95          
     96            // Determine the extended address
     97            zmain_ext_addr();
   \   000054                ; Setup parameters for call to function zmain_ext_addr
   \   000054   12....       LCALL   ??zmain_ext_addr?relay
     98          
     99            // Initialize basic NV items
    100            zgInit();
   \   000057                ; Setup parameters for call to function zgInit
   \   000057   12....       LCALL   ??zgInit?relay
    101          
    102          #ifndef NONWK
    103            // Since the AF isn't a task, call it's initialization routine
    104            afInit();
   \   00005A                ; Setup parameters for call to function afInit
   \   00005A   12....       LCALL   ??afInit?relay
    105          #endif
    106          
    107            // Initialize the operating system
    108            osal_init_system();
   \   00005D                ; Setup parameters for call to function osal_init_system
   \   00005D   12....       LCALL   ??osal_init_system?relay
    109          
    110            // Allow interrupts
    111            osal_int_enable( INTS_ALL );
   \   000060                ; Setup parameters for call to function osal_int_enable
   \   000060   79FF         MOV     R1,#-0x1
   \   000062   12....       LCALL   ??osal_int_enable?relay
    112          
    113            // Final board initialization
    114            InitBoard( OB_READY );
   \   000065                ; Setup parameters for call to function InitBoard
   \   000065   7902         MOV     R1,#0x2
   \   000067   12....       LCALL   ??InitBoard?relay
    115          
    116            // Display information about this device
    117            zmain_dev_info();
   \   00006A                ; Setup parameters for call to function zmain_dev_info
   \   00006A   12....       LCALL   ??zmain_dev_info?relay
    118          
    119            /* Display the device info on the LCD */
    120          #ifdef LCD_SUPPORTED
    121            zmain_lcd_init();
    122          #endif
    123          
    124          #ifdef WDT_IN_PM1
    125            /* If WDT is used, this is a good place to enable it. */
    126            WatchDogEnable( WDTIMX );
    127          #endif
    128          
    129            P1_4 = 1;
   \   00006D   D294         SETB    0x90.4
    130            osal_start_system(); // No Return from here
   \   00006F                ; Setup parameters for call to function osal_start_system
   \   00006F   12....       LCALL   ??osal_start_system?relay
    131          
    132            return 0;  // Shouldn't get here.
   \   000072   7A00         MOV     R2,#0x0
   \   000074   7B00         MOV     R3,#0x0
   \   000076   02....       LJMP    ?BRET
   \   000079                REQUIRE SLEEPCMD
   \   000079                REQUIRE SLEEPSTA
   \   000079                REQUIRE CLKCONCMD
   \   000079                REQUIRE CLKCONSTA
   \   000079                REQUIRE P1DIR
   \   000079                REQUIRE P0INP
   \   000079                REQUIRE _A_P1
    133          } // main()
    134          
    135          /*********************************************************************
    136           * @fn      zmain_vdd_check
    137           * @brief   Check if the Vdd is OK to run the processor.
    138           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    139           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    140          static void zmain_vdd_check( void )
   \                     zmain_vdd_check:
    141          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    142            uint8 vdd_passed_count = 0;
   \   000005   7E00         MOV     R6,#0x0
    143            bool toggle = 0;
   \   000007   7F00         MOV     R7,#0x0
    144          
    145            // Repeat getting the sample until number of failures or successes hits MAX
    146            // then based on the count value, determine if the device is ready or not
    147            while ( vdd_passed_count < MAX_VDD_SAMPLES )
    148            {
    149              if ( HalAdcCheckVdd (ZMAIN_VDD_LIMIT) )
   \                     ??zmain_vdd_check_0:
   \   000009                ; Setup parameters for call to function HalAdcCheckVdd
   \   000009   7904         MOV     R1,#0x4
   \   00000B   12....       LCALL   ??HalAdcCheckVdd?relay
   \   00000E   E9           MOV     A,R1
   \   00000F   6019         JZ      ??zmain_vdd_check_1
    150              {
    151                vdd_passed_count++;    // Keep track # times Vdd passes in a row
   \   000011   0E           INC     R6
    152                MicroWait (10000);     // Wait 10ms to try again
   \   000012                ; Setup parameters for call to function Onboard_wait
   \   000012   7A10         MOV     R2,#0x10
   \   000014   7B27         MOV     R3,#0x27
   \   000016   12....       LCALL   ??Onboard_wait?relay
    153              }
    154              else
    155              {
    156                vdd_passed_count = 0;  // Reset passed counter
    157                MicroWait (50000);     // Wait 50ms
    158                MicroWait (50000);     // Wait another 50ms to try again
    159              }
    160          
    161              /* toggle LED1 and LED2 */
    162              if (vdd_passed_count == 0)
   \   000019   EE           MOV     A,R6
   \   00001A   601E         JZ      ??zmain_vdd_check_2
   \   00001C   C3           CLR     C
   \   00001D   9403         SUBB    A,#0x3
   \   00001F   40E8         JC      ??zmain_vdd_check_0
    163              {
    164                if ((toggle = !(toggle)))
    165                  HAL_TOGGLE_LED1();
    166                else
    167                  HAL_TOGGLE_LED2();
    168              }
    169            }
    170          
    171            /* turn off LED1 */
    172            HAL_TURN_OFF_LED1();
   \   000021   C290         CLR     0x90.0
    173            HAL_TURN_OFF_LED2();
   \   000023   C291         CLR     0x90.1
    174          }
   \   000025   7F01         MOV     R7,#0x1
   \   000027   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??zmain_vdd_check_1:
   \   00002A   7E00         MOV     R6,#0x0
   \   00002C                ; Setup parameters for call to function Onboard_wait
   \   00002C   7A50         MOV     R2,#0x50
   \   00002E   7BC3         MOV     R3,#-0x3d
   \   000030   12....       LCALL   ??Onboard_wait?relay
   \   000033                ; Setup parameters for call to function Onboard_wait
   \   000033   7A50         MOV     R2,#0x50
   \   000035   7BC3         MOV     R3,#-0x3d
   \   000037   12....       LCALL   ??Onboard_wait?relay
   \                     ??zmain_vdd_check_2:
   \   00003A   EF           MOV     A,R7
   \   00003B   700A         JNZ     ??zmain_vdd_check_3
   \   00003D   7F01         MOV     R7,#0x1
   \   00003F   A290         MOV     C,0x90.0
   \   000041   400E         JC      ??zmain_vdd_check_4
   \   000043   D290         SETB    0x90.0
   \   000045   80C2         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_3:
   \   000047   7F00         MOV     R7,#0x0
   \   000049   A291         MOV     C,0x90.1
   \   00004B   4008         JC      ??zmain_vdd_check_5
   \   00004D   D291         SETB    0x90.1
   \   00004F   80B8         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_4:
   \   000051   C290         CLR     0x90.0
   \   000053   80B4         SJMP    ??zmain_vdd_check_0
   \                     ??zmain_vdd_check_5:
   \   000055   C291         CLR     0x90.1
   \   000057   80B0         SJMP    ??zmain_vdd_check_0
   \   000059                REQUIRE _A_P1
    175          
    176          /**************************************************************************************************
    177           * @fn          zmain_ext_addr
    178           *
    179           * @brief       Execute a prioritized search for a valid extended address and write the results
    180           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    181           *
    182           * input parameters
    183           *
    184           * None.
    185           *
    186           * output parameters
    187           *
    188           * None.
    189           *
    190           * @return      None.
    191           **************************************************************************************************
    192           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    193          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    194          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    195            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {255, 255, 255, 255, 255, 255, 255,` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {255, 255, 255, 255, 255, 255, 255,` & 0xff
   \   00001A   7408         MOV     A,#0x8
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    196            uint8 writeNV = TRUE;
    197          
    198            // First check whether a non-erased extended address exists in the OSAL NV.
    199            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    200                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    201                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   00001F   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   000022   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   000025   F5..         MOV     ?V0 + 2,A
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   A982         MOV     R1,DPL
   \   00002F   AA83         MOV     R2,DPH
   \   000031   89..         MOV     ?V0 + 4,R1
   \   000033   8A..         MOV     ?V0 + 5,R2
   \   000035   F5..         MOV     ?V0 + 6,A
   \   000037                ; Setup parameters for call to function osal_nv_item_init
   \   000037   F5..         MOV     ?V0 + 8,A
   \   000039   F5..         MOV     ?V0 + 9,A
   \   00003B   78..         MOV     R0,#?V0 + 8
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   7C08         MOV     R4,#0x8
   \   000042   7D00         MOV     R5,#0x0
   \   000044   7A01         MOV     R2,#0x1
   \   000046   7B00         MOV     R3,#0x0
   \   000048   12....       LCALL   ??osal_nv_item_init?relay
   \   00004B   7402         MOV     A,#0x2
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000050   E9           MOV     A,R1
   \   000051   7046         JNZ     ??zmain_ext_addr_0
   \   000053                ; Setup parameters for call to function osal_nv_read
   \   000053   75....       MOV     ?V0 + 8,#aExtendedAddress & 0xff
   \   000056   75....       MOV     ?V0 + 9,#(aExtendedAddress >> 8) & 0xff
   \   000059   78..         MOV     R0,#?V0 + 8
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   75..08       MOV     ?V0 + 8,#0x8
   \   000061   75..00       MOV     ?V0 + 9,#0x0
   \   000064   78..         MOV     R0,#?V0 + 8
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069   7C00         MOV     R4,#0x0
   \   00006B   7D00         MOV     R5,#0x0
   \   00006D   7A01         MOV     R2,#0x1
   \   00006F   7B00         MOV     R3,#0x0
   \   000071   12....       LCALL   ??osal_nv_read?relay
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079   E9           MOV     A,R1
   \   00007A   701D         JNZ     ??zmain_ext_addr_0
   \   00007C                ; Setup parameters for call to function osal_memcmp
   \   00007C   78..         MOV     R0,#?V0 + 4
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000081   7C08         MOV     R4,#0x8
   \   000083   7D00         MOV     R5,#0x0
   \   000085   A9..         MOV     R1,?V0 + 0
   \   000087   AA..         MOV     R2,?V0 + 1
   \   000089   AB..         MOV     R3,?V0 + 2
   \   00008B   12....       LCALL   ??osal_memcmp?relay
   \   00008E   7403         MOV     A,#0x3
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   \   000093   E9           MOV     A,R1
   \   000094   7003         JNZ     $+5
   \   000096   02....       LJMP    ??zmain_ext_addr_1 & 0xFFFF
    202            {
    203              // Attempt to read the extended address from the location on the lock bits page
    204              // where the programming tools know to reserve it.
    205              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   000099                ; Setup parameters for call to function HalFlashRead
   \   000099   75..08       MOV     ?V0 + 8,#0x8
   \   00009C   78..         MOV     R0,#?V0 + 8
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   7C..         MOV     R4,#aExtendedAddress & 0xff
   \   0000A3   7D..         MOV     R5,#(aExtendedAddress >> 8) & 0xff
   \   0000A5   7AE8         MOV     R2,#-0x18
   \   0000A7   7B07         MOV     R3,#0x7
   \   0000A9   797F         MOV     R1,#0x7f
   \   0000AB   12....       LCALL   ??HalFlashRead?relay
   \   0000AE   7402         MOV     A,#0x2
   \   0000B0   12....       LCALL   ?DEALLOC_XSTACK8
    206          
    207              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000B3                ; Setup parameters for call to function osal_memcmp
   \   0000B3   78..         MOV     R0,#?V0 + 4
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B8   7C08         MOV     R4,#0x8
   \   0000BA   7D00         MOV     R5,#0x0
   \   0000BC   A9..         MOV     R1,?V0 + 0
   \   0000BE   AA..         MOV     R2,?V0 + 1
   \   0000C0   AB..         MOV     R3,?V0 + 2
   \   0000C2   12....       LCALL   ??osal_memcmp?relay
   \   0000C5   7403         MOV     A,#0x3
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CA   E9           MOV     A,R1
   \   0000CB   6035         JZ      ??zmain_ext_addr_2
    208              {
    209                // Attempt to read the extended address from the designated location in the Info Page.
    210                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000CD                ; Setup parameters for call to function osal_memcmp
   \   0000CD   78..         MOV     R0,#?V0 + 4
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D2   7C08         MOV     R4,#0x8
   \   0000D4   7D00         MOV     R5,#0x0
   \   0000D6   790C         MOV     R1,#0xc
   \   0000D8   7A78         MOV     R2,#0x78
   \   0000DA   7B00         MOV     R3,#0x0
   \   0000DC   12....       LCALL   ??osal_memcmp?relay
   \   0000DF   7403         MOV     A,#0x3
   \   0000E1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E4   E9           MOV     A,R1
   \   0000E5   7054         JNZ     ??zmain_ext_addr_3
    211                {
    212                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000E7                ; Setup parameters for call to function osal_memcpy
   \   0000E7   75..0C       MOV     ?V0 + 0,#0xc
   \   0000EA   75..78       MOV     ?V0 + 1,#0x78
   \   0000ED   78..         MOV     R0,#?V0 + 0
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F2   7C08         MOV     R4,#0x8
   \   0000F4   7D00         MOV     R5,#0x0
   \   0000F6   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   0000F8   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   0000FA   12....       LCALL   ??osal_memcpy?relay
   \   0000FD   7403         MOV     A,#0x3
   \   0000FF   12....       LCALL   ?DEALLOC_XSTACK8
    213                }
    214                else  // No valid extended address was found.
    215                {
    216                  uint8 idx;
    217                  
    218          #if !defined ( NV_RESTORE )
    219                  writeNV = FALSE;  // Make this a temporary IEEE address
    220          #endif
    221          
    222                  /* Attempt to create a sufficiently random extended address for expediency.
    223                   * Note: this is only valid/legal in a test environment and
    224                   *       must never be used for a commercial product.
    225                   */
    226                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
    227                  {
    228                    uint16 randy = osal_rand();
    229                    aExtendedAddress[idx++] = LO_UINT16(randy);
    230                    aExtendedAddress[idx++] = HI_UINT16(randy);
    231                  }
    232                  // Next-to-MSB identifies ZigBee devicetype.
    233          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    234                  aExtendedAddress[idx++] = 0x10;
    235          #elif ZG_BUILD_RTRONLY_TYPE
    236                  aExtendedAddress[idx++] = 0x20;
    237          #else
    238                  aExtendedAddress[idx++] = 0x30;
    239          #endif
    240                  // MSB has historical signficance.
    241                  aExtendedAddress[idx] = 0xF8;
    242                }
    243              }
    244          
    245              if (writeNV)
    246              {
    247                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   000102                ; Setup parameters for call to function osal_nv_write
   \   000102   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   000105   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   000108   78..         MOV     R0,#?V0 + 0
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010D   75..08       MOV     ?V0 + 0,#0x8
   \   000110   75..00       MOV     ?V0 + 1,#0x0
   \   000113   78..         MOV     R0,#?V0 + 0
   \   000115   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000118   7C00         MOV     R4,#0x0
   \   00011A   7D00         MOV     R5,#0x0
   \   00011C   7A01         MOV     R2,#0x1
   \   00011E   7B00         MOV     R3,#0x0
   \   000120   12....       LCALL   ??osal_nv_write?relay
   \   000123   7404         MOV     A,#0x4
   \   000125   12....       LCALL   ?DEALLOC_XSTACK8
    248              }
    249            }
    250          
    251            // Set the MAC PIB extended address according to results from above.
    252            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   000128                ; Setup parameters for call to function ZMacSetReq
   \   000128   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   00012A   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   00012C   79E2         MOV     R1,#-0x1e
   \   00012E   12....       LCALL   ??ZMacSetReq?relay
    253          }
   \   000131   7408         MOV     A,#0x8
   \   000133   12....       LCALL   ?DEALLOC_XSTACK8
   \   000136   7F0A         MOV     R7,#0xa
   \   000138   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??zmain_ext_addr_3:
   \   00013B   7E00         MOV     R6,#0x0
   \                     ??zmain_ext_addr_4:
   \   00013D                ; Setup parameters for call to function osal_rand
   \   00013D   12....       LCALL   ??osal_rand?relay
   \   000140   8A..         MOV     ?V0 + 0,R2
   \   000142   A8..         MOV     R0,?V0 + 0
   \   000144   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000147   E8           MOV     A,R0
   \   000148   F0           MOVX    @DPTR,A
   \   000149   0E           INC     R6
   \   00014A   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00014D   EB           MOV     A,R3
   \   00014E   F0           MOVX    @DPTR,A
   \   00014F   0E           INC     R6
   \   000150   EE           MOV     A,R6
   \   000151   C3           CLR     C
   \   000152   9406         SUBB    A,#0x6
   \   000154   40E7         JC      ??zmain_ext_addr_4
   \   000156   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000159   7410         MOV     A,#0x10
   \   00015B   F0           MOVX    @DPTR,A
   \   00015C   7401         MOV     A,#0x1
   \   00015E   2E           ADD     A,R6
   \   00015F   F8           MOV     R0,A
   \   000160   74..         MOV     A,#aExtendedAddress & 0xff
   \   000162   28           ADD     A,R0
   \   000163   F582         MOV     DPL,A
   \   000165   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   000167   3400         ADDC    A,#0x0
   \   000169   F583         MOV     DPH,A
   \   00016B   74F8         MOV     A,#-0x8
   \   00016D   F0           MOVX    @DPTR,A
   \   00016E   80B8         SJMP    ??zmain_ext_addr_1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   8E..         MOV     ?V0 + 0,R6
   \   000002   74..         MOV     A,#aExtendedAddress & 0xff
   \   000004   25..         ADD     A,?V0 + 0
   \   000006   F582         MOV     DPL,A
   \   000008   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET
    254          
    255          /**************************************************************************************************
    256           * @fn          zmain_dev_info
    257           *
    258           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    259           *
    260           * input parameters
    261           *
    262           * None.
    263           *
    264           * output parameters
    265           *
    266           * None.
    267           *
    268           * @return      None.
    269           **************************************************************************************************
    270           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    271          static void zmain_dev_info(void)
   \                     zmain_dev_info:
    272          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    273          #ifdef LCD_SUPPORTED
    274            uint8 i;
    275            uint8 *xad;
    276            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    277          
    278            // Display the extended address.
    279            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
   \   00000A   78..         MOV     R0,#(aExtendedAddress + 7) & 0xff
   \   00000C   79..         MOV     R1,#((aExtendedAddress + 7) >> 8) & 0xff
    280          
    281            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
   \   00000E   7C00         MOV     R4,#0x0
    282            {
    283              uint8 ch;
    284              ch = (*xad >> 4) & 0x0F;
   \                     ??zmain_dev_info_0:
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   E0           MOVX    A,@DPTR
   \   000015   C4           SWAP    A
   \   000016   540F         ANL     A,#0xf
   \   000018   FD           MOV     R5,A
    285              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
   \   000019   EC           MOV     A,R4
   \   00001A   FE           MOV     R6,A
   \   00001B   0C           INC     R4
   \   00001C   ED           MOV     A,R5
   \   00001D   C3           CLR     C
   \   00001E   940A         SUBB    A,#0xa
   \   000020   5004         JNC     ??zmain_dev_info_1
   \   000022   7A30         MOV     R2,#0x30
   \   000024   8002         SJMP    ??zmain_dev_info_2
   \                     ??zmain_dev_info_1:
   \   000026   7A37         MOV     R2,#0x37
   \                     ??zmain_dev_info_2:
   \   000028   EA           MOV     A,R2
   \   000029   2D           ADD     A,R5
   \   00002A   C0E0         PUSH    A
   \   00002C   8E..         MOV     ?V0 + 0,R6
   \   00002E   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000031   D0E0         POP     A
   \   000033   F0           MOVX    @DPTR,A
    286              ch = *xad & 0x0F;
   \   000034   8882         MOV     DPL,R0
   \   000036   8983         MOV     DPH,R1
   \   000038   E0           MOVX    A,@DPTR
   \   000039   540F         ANL     A,#0xf
   \   00003B   FD           MOV     R5,A
    287              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
   \   00003C   EC           MOV     A,R4
   \   00003D   FF           MOV     R7,A
   \   00003E   0C           INC     R4
   \   00003F   ED           MOV     A,R5
   \   000040   C3           CLR     C
   \   000041   940A         SUBB    A,#0xa
   \   000043   5004         JNC     ??zmain_dev_info_3
   \   000045   7A30         MOV     R2,#0x30
   \   000047   8002         SJMP    ??zmain_dev_info_4
   \                     ??zmain_dev_info_3:
   \   000049   7A37         MOV     R2,#0x37
   \                     ??zmain_dev_info_4:
   \   00004B   EA           MOV     A,R2
   \   00004C   2D           ADD     A,R5
   \   00004D   C0E0         PUSH    A
   \   00004F   8F..         MOV     ?V0 + 0,R7
   \   000051   12....       LCALL   ?Subroutine1 & 0xFFFF
    288            }
   \                     ??CrossCallReturnLabel_4:
   \   000054   D0E0         POP     A
   \   000056   F0           MOVX    @DPTR,A
   \   000057   E8           MOV     A,R0
   \   000058   24FF         ADD     A,#-0x1
   \   00005A   18           DEC     R0
   \   00005B   E9           MOV     A,R1
   \   00005C   34FF         ADDC    A,#-0x1
   \   00005E   F9           MOV     R1,A
   \   00005F   EC           MOV     A,R4
   \   000060   C3           CLR     C
   \   000061   9410         SUBB    A,#0x10
   \   000063   40AB         JC      ??zmain_dev_info_0
    289            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
   \   000065   7410         MOV     A,#0x10
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E4           CLR     A
   \   00006B   F0           MOVX    @DPTR,A
    290            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_1 );
   \   00006C                ; Setup parameters for call to function HalLcdWriteString
   \   00006C   7901         MOV     R1,#0x1
   \   00006E   7A..         MOV     R2,#`?<Constant "IEEE: ">` & 0xff
   \   000070   7B..         MOV     R3,#(`?<Constant "IEEE: ">` >> 8) & 0xff
   \   000072   12....       LCALL   ??HalLcdWriteString?relay
    291            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
   \   000075                ; Setup parameters for call to function HalLcdWriteString
   \   000075   7902         MOV     R1,#0x2
   \   000077   85..82       MOV     DPL,?XSP + 0
   \   00007A   85..83       MOV     DPH,?XSP + 1
   \   00007D   AA82         MOV     R2,DPL
   \   00007F   AB83         MOV     R3,DPH
   \   000081   12....       LCALL   ??HalLcdWriteString?relay
    292          #endif
    293          }
   \   000084   7411         MOV     A,#0x11
   \   000086   12....       LCALL   ?DEALLOC_XSTACK8
   \   000089   7F02         MOV     R7,#0x2
   \   00008B   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E582         MOV     A,DPL
   \   000008   25..         ADD     A,?V0 + 0
   \   00000A   F582         MOV     DPL,A
   \   00000C   E583         MOV     A,DPH
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F583         MOV     DPH,A
   \   000012   22           RET
    294          
    295          #ifdef LCD_SUPPORTED
    296          /*********************************************************************
    297           * @fn      zmain_lcd_init
    298           * @brief   Initialize LCD at start up.
    299           * @return  none
    300           *********************************************************************/
    301          static void zmain_lcd_init ( void )
    302          {
    303          #ifdef SERIAL_DEBUG_SUPPORTED
    304            {
    305              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    306          
    307          #if defined( MT_MAC_FUNC )
    308          #if defined( ZDO_COORDINATOR )
    309                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    310          #else
    311                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    312          #endif // ZDO
    313          #elif defined( MT_NWK_FUNC )
    314          #if defined( ZDO_COORDINATOR )
    315                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    316          #else
    317                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    318          #endif // ZDO
    319          #endif // MT_FUNC
    320            }
    321          #endif // SERIAL_DEBUG_SUPPORTED
    322          }
    323          #endif
    324          
    325          /*********************************************************************
    326          *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    327          void Pin_init()
   \                     Pin_init:
    328          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    329            P1DIR |= 0xff;
   \   000000   75FEFF       MOV     0xfe,#-0x1
    330          }
   \   000003   02....       LJMP    ?BRET
   \   000006                REQUIRE P1DIR

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??main?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_vdd_check?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_vdd_check

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_ext_addr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_ext_addr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zmain_dev_info?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_dev_info

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Pin_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Pin_init

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IEEE: ">`:
   \   000000   49454545     DB "IEEE: "
   \            3A2000  

   Maximum stack usage in bytes:

     Function               ISTACK PSTACK XSTACK
     --------               ------ ------ ------
     Pin_init                   0      0      0
     main                       0      0      0
       -> osal_int_disable      0      0      0
       -> zmain_vdd_check       0      0      0
       -> InitBoard             0      0      0
       -> HalDriverInit         0      0      0
       -> osal_nv_init          0      0      0
       -> ZMacInit              0      0      0
       -> zmain_ext_addr        0      0      0
       -> zgInit                0      0      0
       -> afInit                0      0      0
       -> osal_init_system      0      0      0
       -> osal_int_enable       0      0      0
       -> InitBoard             0      0      0
       -> zmain_dev_info        0      0      0
       -> osal_start_system     0      0      0
     zmain_dev_info             1      0     27
       -> HalLcdWriteString     0      0     54
       -> HalLcdWriteString     0      0     54
     zmain_ext_addr             2      0     30
       -> osal_nv_item_init     0      0     56
       -> osal_nv_read          0      0     60
       -> osal_memcmp           0      0     58
       -> HalFlashRead          0      0     56
       -> osal_memcmp           0      0     58
       -> osal_memcmp           0      0     58
       -> osal_memcpy           0      0     58
       -> osal_nv_write         0      0     60
       -> ZMacSetReq            0      0     52
       -> osal_rand             0      0     52
     zmain_vdd_check            0      0      9
       -> HalAdcCheckVdd        0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18
       -> Onboard_wait          0      0     18


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     P0INP                                             1
     _A_P1                                             1
     SLEEPSTA                                          1
     CLKCONSTA                                         1
     SLEEPCMD                                          1
     CLKCONCMD                                         1
     P1DIR                                             1
     main                                            121
     zmain_vdd_check                                  89
     zmain_ext_addr                                  368
     ?Subroutine0                                     15
     zmain_dev_info                                  142
     ?Subroutine1                                     19
     Pin_init                                          6
     ??main?relay                                      6
     ??zmain_vdd_check?relay                           6
     ??zmain_ext_addr?relay                            6
     ??zmain_dev_info?relay                            6
     ??Pin_init?relay                                  6
     ?<Constant {255, 255, 255, 255, 255, 255, 255,    8
     ?<Constant "IEEE: ">                              7

 
 760 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
   7 bytes in segment SFR_AN
  15 bytes in segment XDATA_ROM_C
 
 790 bytes of CODE  memory
  15 bytes of CONST memory
   0 bytes of DATA  memory (+ 7 bytes shared)

Errors: none
Warnings: none
