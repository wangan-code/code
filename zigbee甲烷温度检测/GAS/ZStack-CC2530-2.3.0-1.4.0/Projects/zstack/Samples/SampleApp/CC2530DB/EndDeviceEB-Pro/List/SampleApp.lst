###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         06/Jan/2021  12:17:23 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\Source\SampleA #
#                          pp.c                                               #
#    Command line       =  -f C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ     #
#                          -DROOT=__near_func -DBLINK_LEDS) -f                #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0       #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\Source\SampleA #
#                          pp.c -D ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D  #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\小安\Desktop\GAS\ #
#                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\EndDeviceEB-Pro\List\ -lA       #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDe #
#                          viceEB-Pro\List\ --diag_suppress Pe001,Pa010 -o    #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDe #
#                          viceEB-Pro\Obj\ -e --debug --core=plain            #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\小安\Desktop\GAS\ #
#                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\ -I C:\Users\小安\Desktop\GAS\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\SOURCE\ -I                    #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\ZMAIN\TI2530DB\ -I C:\Users\小安\Desktop\GAS\Z #
#                          Stack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S #
#                          ampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\    #
#                          -I C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I       #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I            #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\OSAL\INCLUDE\ -I              #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\AF\ -I                  #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\NWK\ -I                 #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SEC\ -I                 #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SAPI\ -I                #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\SYS\ -I                 #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\STACK\ZDO\ -I                 #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\F8W\ -I                  #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\ZMAC\ -I                      #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SADDR\ -I            #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\SERVICES\SDATA\ -I            #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\INCLUDE\ -I               #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I            #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I       #
#                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\..\.. #
#                          \..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CH #
#                          IP\ -Ohz --require_prototypes                      #
#    List file          =  C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDe #
#                          viceEB-Pro\List\SampleApp.lst                      #
#    Object file        =  C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4. #
#                          0\Projects\zstack\Samples\SampleApp\CC2530DB\EndDe #
#                          viceEB-Pro\Obj\SampleApp.r51                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          #include <stdio.h>
      2          #include "OSAL.h"
      3          #include "ZGlobals.h"
      4          #include "AF.h"
      5          #include "aps_groups.h"
      6          #include "ZDApp.h"
      7          
      8          #include "SampleApp.h"
      9          #include "SampleAppHw.h"
     10          
     11          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1
     12          
     13          /* HAL */
     14          #include "hal_lcd.h"
     15          #include "hal_led.h"
     16          #include "hal_key.h"
     17          #include "MT_UART.h"
     18          #include "MT_APP.h"
     19          #include "MT.h"
     20          #include "ds18b20.h"
     21          
     22          /*********************************************************************
     23           * MACROS
     24           */
     25          #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
     26          
     27          #define BEEP P1_4
     28          #define GLED P1_5
     29          #define RLED P1_6
     30          
     31          #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
     32          #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
     33          #define HAL_ADC_DEC_256     0x20    /* Decimate by 256 : 12-bit resolution */
     34          #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
     35          #define HAL_ADC_DEC_BITS    0x30    /* Bits [5:4] */
     36          #define HAL_ADC_CHANNEL_6          0x06
     37          
     38          #define uint unsigned int
     39          #define uchar unsigned char
     40          /*********************************************************************
     41           * CONSTANTS
     42           */
     43          
     44          /*********************************************************************
     45           * TYPEDEFS
     46           */
     47          
     48          /*********************************************************************
     49           * GLOBAL VARIABLES
     50           */
     51          
     52          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     53          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     54          {
     55            SAMPLEAPP_PERIODIC_CLUSTERID,
     56            SAMPLEAPP_FLASH_CLUSTERID
     57          };
     58          

   \                                 In  segment XDATA_ROM_C, align 1
     59          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
     60          {
     61            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
     62            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
     63            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     64            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     65            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
     66            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     67            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
     68            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     69            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
     70          };
     71          
     72          // This is the Endpoint/Interface description.  It is defined here, but
     73          // filled-in in SampleApp_Init().  Another way to go would be to fill
     74          // in the structure here and make it a "const" (in code space).  The
     75          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     76          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     77          
     78          /*********************************************************************
     79           * EXTERNAL VARIABLES
     80           */
     81          
     82          /*********************************************************************
     83           * EXTERNAL FUNCTIONS
     84           */
     85          
     86          /*********************************************************************
     87           * LOCAL VARIABLES
     88           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     90                                    // This variable will be received when
     91                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     93          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     95          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          afAddrType_t SampleApp_Periodic_DstAddr; //广播
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     97          afAddrType_t SampleApp_Flash_DstAddr;    //组播
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          afAddrType_t SampleApp_P2P_DstAddr;      //点播
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     99          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    100          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    101          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    104          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          uint8 TIM_conter = 0;
   \                     TIM_conter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          byte BEEP_Flag = 0;
   \                     BEEP_Flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    107          
    108          /*********************************************************************
    109           * LOCAL FUNCTIONS
    110           */
    111          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    112          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    113          void SampleApp_SendPeriodicMessage( void );
    114          void SampleApp_SendFlashMessage( uint16 flashTime );
    115          void SampleApp_Send_P2P_Message(void);
    116          int ReadGasData( void );
    117          void Waring(uint);
    118          void DelayMS(uint msec);
    119          void LCD_P8x16Str(unsigned char x, unsigned char y,unsigned char ch[]);
    120          
    121          
    122          /*********************************************************************
    123           * NETWORK LAYER CALLBACKS
    124           */
    125          
    126          /*********************************************************************
    127           * PUBLIC FUNCTIONS
    128           */
    129          
    130          /*********************************************************************
    131           * @fn      SampleApp_Init
    132           *
    133           * @brief   Initialization function for the Generic App Task.
    134           *          This is called during initialization and should contain
    135           *          any application specific initialization (ie. hardware
    136           *          initialization/setup, table initialization, power up
    137           *          notificaiton ... ).
    138           *
    139           * @param   task_id - the ID assigned by OSAL.  This ID should be
    140           *                    used to send messages and set timers.
    141           *
    142           * @return  none
    143           */
    144          /****************************************************************************
    145          * ADC读取函数
    146          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    147          int ReadGasData( void )
   \                     ReadGasData:
    148          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    149            unsigned int reading = 0;
    150            
    151            /* Enable channel */
    152            ADCCFG |= 0x40;
   \   000000   43F240       ORL     0xf2,#0x40
    153            
    154            /* writing to this register starts the extra conversion */
    155            //ADCCON3 = 0x86;// 0x87;
    156            ADCCON3 = (0x40 | HAL_ADC_DEC_256 | HAL_ADC_CHANNEL_6);
   \   000003   75B666       MOV     0xb6,#0x66
    157            
    158            /* Wait for the conversion to be done */
    159            while (!(ADCCON1 & 0x80));
   \                     ??ReadGasData_0:
   \   000006   E5B4         MOV     A,0xb4
   \   000008   A2E7         MOV     C,0xE0 /* A   */.7
   \   00000A   50FA         JNC     ??ReadGasData_0
    160            
    161            /* Disable channel after done conversion */
    162            ADCCFG &= (0x80 ^ 0xFF); //按位异或。如1010^1111=0101（二进制）
   \   00000C   53F27F       ANL     0xf2,#0x7f
    163            
    164            /* Read the result */
    165            reading = ADCL;
   \   00000F   E5BA         MOV     A,0xba
    166            reading |= (int) (ADCH << 8); 
    167            
    168            reading >>= 8;
    169            
    170            return (reading);
   \   000011   E5BB         MOV     A,0xbb
   \   000013   FA           MOV     R2,A
   \   000014   E4           CLR     A
   \   000015   FB           MOV     R3,A
   \   000016   02....       LJMP    ?BRET
   \   000019                REQUIRE ADCCFG
   \   000019                REQUIRE ADCCON3
   \   000019                REQUIRE ADCCON1
   \   000019                REQUIRE ADCL
   \   000019                REQUIRE ADCH
    171          }
    172          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    173          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    174          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    175            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    176            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    177            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    178            
    179            MT_UartInit();                  //串口初始化
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    180            MT_UartRegisterTaskID(task_id); //注册串口任务
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    181            P0SEL &= 0x7f;                  //DS18B20的io口初始化 p0.7
   \   00001E   53F37F       ANL     0xf3,#0x7f
    182            
    183            // Device hardware initialization can be added here or in main() (Zmain.c).
    184            // If the hardware is application specific - add it here.
    185            // If the hardware is other parts of the device add it in main().
    186          
    187           #if defined ( BUILD_ALL_DEVICES )
    188            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    189            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    190            // together - if they are - we will start up a coordinator. Otherwise,
    191            // the device will start as a router.
    192            if ( readCoordinatorJumper() )
    193              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    194            else
    195              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    196          #endif // BUILD_ALL_DEVICES
    197          
    198          #if defined ( HOLD_AUTO_START )
    199            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    200            //  from starting the device and wait for the application to
    201            //  start the device.
    202            ZDOInitDevice(0);
    203          #endif
    204          
    205            // Setup for the periodic message's destination address
    206            // Broadcast to everyone
    207            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000021   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000024   740F         MOV     A,#0xf
   \   000026   F0           MOVX    @DPTR,A
    208            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000027   A3           INC     DPTR
   \   000028   7414         MOV     A,#0x14
   \   00002A   F0           MOVX    @DPTR,A
    209            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00002B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00002E   74FF         MOV     A,#-0x1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   F0           MOVX    @DPTR,A
    210          
    211            // Setup for the flash command's destination address - Group 1
    212            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000033   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000036   7401         MOV     A,#0x1
   \   000038   F0           MOVX    @DPTR,A
    213            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000039   A3           INC     DPTR
   \   00003A   7414         MOV     A,#0x14
   \   00003C   F0           MOVX    @DPTR,A
    214            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00003D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000040   7401         MOV     A,#0x1
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
    215          
    216            // Fill out the endpoint description.
    217            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000046   90....       MOV     DPTR,#SampleApp_epDesc
   \   000049   7414         MOV     A,#0x14
   \   00004B   F0           MOVX    @DPTR,A
    218            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00004C   A3           INC     DPTR
   \   00004D   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000053   F0           MOVX    @DPTR,A
    219            SampleApp_epDesc.simpleDesc
    220                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000054   A3           INC     DPTR
   \   000055   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00005B   F0           MOVX    @DPTR,A
    221            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00005C   A3           INC     DPTR
   \   00005D   E4           CLR     A
   \   00005E   F0           MOVX    @DPTR,A
    222          
    223            // Register the endpoint description with the AF
    224            afRegister( &SampleApp_epDesc );
   \   00005F                ; Setup parameters for call to function afRegister
   \   00005F   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000061   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000063   12....       LCALL   ??afRegister?relay
    225          
    226            // Register for all key events - This app will handle all key events
    227            RegisterForKeys( SampleApp_TaskID );
   \   000066                ; Setup parameters for call to function RegisterForKeys
   \   000066   90....       MOV     DPTR,#SampleApp_TaskID
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??RegisterForKeys?relay
    228          
    229            // By default, all devices start out in Group 1
    230            SampleApp_Group.ID = 0x0001;
   \   00006E   90....       MOV     DPTR,#SampleApp_Group
   \   000071   7401         MOV     A,#0x1
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   \   000075   E4           CLR     A
   \   000076   F0           MOVX    @DPTR,A
    231            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   000077                ; Setup parameters for call to function osal_memcpy
   \   000077   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00007A   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00007D   F5..         MOV     ?V0 + 2,A
   \   00007F   78..         MOV     R0,#?V0 + 0
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000084   7C07         MOV     R4,#0x7
   \   000086   7D00         MOV     R5,#0x0
   \   000088   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00008A   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   00008C   12....       LCALL   ??osal_memcpy?relay
   \   00008F   7403         MOV     A,#0x3
   \   000091   12....       LCALL   ?DEALLOC_XSTACK8
    232            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   000094                ; Setup parameters for call to function aps_AddGroup
   \   000094   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000096   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000098   7914         MOV     R1,#0x14
   \   00009A   12....       LCALL   ??aps_AddGroup?relay
    233          
    234          #if defined ( LCD_SUPPORTED )
    235            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   00009D                ; Setup parameters for call to function HalLcdWriteString
   \   00009D   7901         MOV     R1,#0x1
   \   00009F   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000A1   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000A3   12....       LCALL   ??HalLcdWriteString?relay
    236          #endif
    237          }
   \   0000A6   7F03         MOV     R7,#0x3
   \   0000A8   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000AB                REQUIRE P0SEL
    238          
    239          /*********************************************************************
    240           * @fn      SampleApp_ProcessEvent
    241           *
    242           * @brief   Generic Application Task event processor.  This function
    243           *          is called to process all events for the task.  Events
    244           *          include timers, messages and any other user defined events.
    245           *
    246           * @param   task_id  - The OSAL assigned task ID.
    247           * @param   events - events to process.  This is a bit map and can
    248           *                   contain more than one event.
    249           *
    250           * @return  none
    251           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    252          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    253          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    254            afIncomingMSGPacket_t *MSGpkt;
    255            (void)task_id;  // Intentionally unreferenced parameter
    256          
    257            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    258            {
    259              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    260              while ( MSGpkt )
    261              {
    262                switch ( MSGpkt->hdr.event )
    263                {
    264                  // Received when a key is pressed
    265                  case KEY_CHANGE:
    266                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    267                    break;
    268          
    269                  // Received when a messages is received (OTA) for this endpoint
    270                  case AF_INCOMING_MSG_CMD:
    271                    SampleApp_MessageMSGCB( MSGpkt );
    272                    break;
    273          
    274                  // Received whenever the device changes state in the network
    275                  case ZDO_STATE_CHANGE:
    276                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    277                    if (  //(SampleApp_NwkState == DEV_ZB_COORD) ||
    278                           (SampleApp_NwkState == DEV_ROUTER)
    279                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    280                    {
    281                      // Start sending the periodic message in a regular interval.
    282                     osal_start_timerEx( SampleApp_TaskID,
    283                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    284                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CF4         MOV     R4,#-0xc
   \   000020   7D01         MOV     R5,#0x1
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    285                    }
    286                    else
    287                    {
    288                      // Device is no longer in the network
    289                    }
    290                    break;
    291          
    292                  default:
    293                    break;
    294                }
    295          
    296                // Release the memory
    297                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    298          
    299                // Next - if one is available
    300                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    301              }
    302          
    303              // return unprocessed events
    304              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    305            }
    306          
    307            // Send a message out - This event is generated by a timer
    308            //  (setup in SampleApp_Init()).
    309            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    310            {
    311              // Send the periodic message
    312              SampleApp_SendPeriodicMessage();
   \   000086                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000086   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    313              //SampleApp_Send_P2P_Message();
    314          
    315              // Setup to send message again in normal period (+ a little jitter)
    316              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    317                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24F4         ADD     A,#-0xc
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3401         ADDC    A,#0x1
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    318          
    319              // return unprocessed events
    320              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    321            }
    322          
    323            // Discard unknown events
    324            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    325          }
    326          
    327          /*********************************************************************
    328           * Event Generation Functions
    329           */
    330          /*********************************************************************
    331           * @fn      SampleApp_HandleKeys
    332           *
    333           * @brief   Handles all key events for this device.
    334           *
    335           * @param   shift - true if in shift/alt.
    336           * @param   keys - bit field for key events. Valid entries:
    337           *                 HAL_KEY_SW_2
    338           *                 HAL_KEY_SW_1
    339           *
    340           * @return  none
    341           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    342          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    343          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    344            (void)shift;  // Intentionally unreferenced parameter
    345            
    346            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    347            {
    348              /* This key sends the Flash Command is sent to Group 1.
    349               * This device will not receive the Flash Command from this
    350               * device (even if it belongs to group 1).
    351               */
    352              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    353            }
    354          
    355            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    356            {
    357              /* The Flashr Command is sent to Group 1.
    358               * This key toggles this device in and out of group 1.
    359               * If this device doesn't belong to group 1, this application
    360               * will not receive the Flash command sent to group 1.
    361               */
    362              aps_Group_t *grp;
    363              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    364              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    365              {
    366                // Remove from the group
    367                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    368              }
    369              else
    370              {
    371                // Add to the flash group
    372                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    373              }
    374            }
    375          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   02....       LJMP    ??Subroutine1_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine1_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    376          
    377          /*********************************************************************
    378           * LOCAL FUNCTIONS
    379           */
    380          
    381          /*********************************************************************
    382           * @fn      SampleApp_MessageMSGCB
    383           *
    384           * @brief   Data message processor callback.  This function processes
    385           *          any incoming data - probably from other devices.  So, based
    386           *          on cluster ID, perform the intended action.
    387           *
    388           * @param   none
    389           *
    390           * @return  none
    391           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    392          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    393          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
    394            uint16 flashTime;
    395            byte buf[1];
    396          
    397            switch ( pkt->clusterId )
   \   00000E   EA           MOV     A,R2
   \   00000F   2421         ADD     A,#0x21
   \   000011   FE           MOV     R6,A
   \   000012   EB           MOV     A,R3
   \   000013   3400         ADDC    A,#0x0
   \   000015   FF           MOV     R7,A
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 2,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 3,A
   \   000025   78..         MOV     R0,#?V0 + 2
   \   000027   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00002A   0100         DW        1
   \   00002C   01           DB        1
   \   00002D   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00002F   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000031   ....         DW        ??SampleApp_MessageMSGCB_2
    398            {
    399              case SAMPLEAPP_PERIODIC_CLUSTERID:    //接收到广播信息
    400                osal_memset(buf, 0 , 1);
   \                     ??SampleApp_MessageMSGCB_1:
   \   000033                ; Setup parameters for call to function osal_memset
   \   000033   7C01         MOV     R4,#0x1
   \   000035   7D00         MOV     R5,#0x0
   \   000037   7900         MOV     R1,#0x0
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   AA82         MOV     R2,DPL
   \   000041   AB83         MOV     R3,DPH
   \   000043   12....       LCALL   ??osal_memset?relay
    401                osal_memcpy(buf, pkt->cmd.Data, 1); //复制数据到缓冲区中
   \   000046                ; Setup parameters for call to function osal_memcpy
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F5..         MOV     ?V0 + 4,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V0 + 5,A
   \   000051   75..00       MOV     ?V0 + 6,#0x0
   \   000054   78..         MOV     R0,#?V0 + 4
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   7C01         MOV     R4,#0x1
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   7403         MOV     A,#0x3
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   AA82         MOV     R2,DPL
   \   000064   AB83         MOV     R3,DPH
   \   000066   12....       LCALL   ??osal_memcpy?relay
   \   000069   7403         MOV     A,#0x3
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
    402                if(buf[0]=='w')      //判断收到的数据是否为"w" 
   \   00006E   75....       MOV     ?V0 + 2,#`?<Constant "\\r\\n">` & 0xff
   \   000071   75....       MOV     ?V0 + 3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
   \   000074   85..82       MOV     DPL,?XSP + 0
   \   000077   85..83       MOV     DPH,?XSP + 1
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   6477         XRL     A,#0x77
   \   00007D   701F         JNZ     ??SampleApp_MessageMSGCB_3
    403                {
    404                  SampleApp_SendPeriodicMessage(); 
   \   00007F                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00007F   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    405                  HalUARTWrite(0, "\r\n", 2);         // 回车换行
   \   000082                ; Setup parameters for call to function HalUARTWrite
   \   000082   7C02         MOV     R4,#0x2
   \   000084   7D00         MOV     R5,#0x0
   \   000086   AA..         MOV     R2,?V0 + 2
   \   000088   AB..         MOV     R3,?V0 + 3
   \   00008A   7900         MOV     R1,#0x0
   \   00008C   12....       LCALL   ??HalUARTWrite?relay
    406                  HalUARTWrite(0, "UNUSUAL :", 9);         // 串口提示报警
   \   00008F                ; Setup parameters for call to function HalUARTWrite
   \   00008F   7C09         MOV     R4,#0x9
   \   000091   7D00         MOV     R5,#0x0
   \   000093   7A..         MOV     R2,#`?<Constant "UNUSUAL :">` & 0xff
   \   000095   7B..         MOV     R3,#(`?<Constant "UNUSUAL :">` >> 8) & 0xff
   \                     ??SampleApp_MessageMSGCB_4:
   \   000097   7900         MOV     R1,#0x0
   \   000099   12....       LCALL   ??HalUARTWrite?relay
   \   00009C   806B         SJMP    ??SampleApp_MessageMSGCB_0
    407                }
    408                
    409                else
    410                {
    411                  HalUARTWrite(0, "TEMP:", 5);       //提示接收到数据
   \                     ??SampleApp_MessageMSGCB_3:
   \   00009E                ; Setup parameters for call to function HalUARTWrite
   \   00009E   7C05         MOV     R4,#0x5
   \   0000A0   7D00         MOV     R5,#0x0
   \   0000A2   7A..         MOV     R2,#`?<Constant "TEMP:">` & 0xff
   \   0000A4   7B..         MOV     R3,#(`?<Constant "TEMP:">` >> 8) & 0xff
   \   0000A6   7900         MOV     R1,#0x0
   \   0000A8   12....       LCALL   ??HalUARTWrite?relay
    412                  HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength);//输出接收到的数据
   \   0000AB                ; Setup parameters for call to function HalUARTWrite
   \   0000AB   E5..         MOV     A,?V0 + 0
   \   0000AD   241F         ADD     A,#0x1f
   \   0000AF   F582         MOV     DPL,A
   \   0000B1   E5..         MOV     A,?V0 + 1
   \   0000B3   3400         ADDC    A,#0x0
   \   0000B5   F583         MOV     DPH,A
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   FC           MOV     R4,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   FD           MOV     R5,A
   \   0000BC   8E82         MOV     DPL,R6
   \   0000BE   8F83         MOV     DPH,R7
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   FA           MOV     R2,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   FB           MOV     R3,A
   \   0000C5   7900         MOV     R1,#0x0
   \   0000C7   12....       LCALL   ??HalUARTWrite?relay
    413                  HalUARTWrite(0, "\r\n", 2);         // 回车换行
   \   0000CA                ; Setup parameters for call to function HalUARTWrite
   \   0000CA   7C02         MOV     R4,#0x2
   \   0000CC   7D00         MOV     R5,#0x0
   \   0000CE   AA..         MOV     R2,?V0 + 2
   \   0000D0   AB..         MOV     R3,?V0 + 3
   \   0000D2   80C3         SJMP    ??SampleApp_MessageMSGCB_4
    414                }
    415                break;
    416          
    417              case SAMPLEAPP_FLASH_CLUSTERID:  //接收组播信息
    418                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    419                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_2:
   \   0000D4   8E82         MOV     DPL,R6
   \   0000D6   8F83         MOV     DPH,R7
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   F8           MOV     R0,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F9           MOV     R1,A
   \   0000DD                ; Setup parameters for call to function HalLedBlink
   \   0000DD   8882         MOV     DPL,R0
   \   0000DF   8983         MOV     DPH,R1
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   FA           MOV     R2,A
   \   0000E4   8882         MOV     DPL,R0
   \   0000E6   8983         MOV     DPH,R1
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F9           MOV     R1,A
   \   0000EC   EA           MOV     A,R2
   \   0000ED   2400         ADD     A,#0x0
   \   0000EF   F5..         MOV     ?V0 + 0,A
   \   0000F1   E4           CLR     A
   \   0000F2   39           ADDC    A,R1
   \   0000F3   F5..         MOV     ?V0 + 1,A
   \   0000F5   7402         MOV     A,#0x2
   \   0000F7   78..         MOV     R0,#?V0 + 0
   \   0000F9   12....       LCALL   ?US_SHR
   \   0000FC   AC..         MOV     R4,?V0 + 0
   \   0000FE   AD..         MOV     R5,?V0 + 1
   \   000100   7B32         MOV     R3,#0x32
   \   000102   7A04         MOV     R2,#0x4
   \   000104   7908         MOV     R1,#0x8
   \   000106   12....       LCALL   ??HalLedBlink?relay
    420                break;
    421            }
    422          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000109   7401         MOV     A,#0x1
   \   00010B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010E   7F07         MOV     R7,#0x7
   \   000110   02....       LJMP    ?BANKED_LEAVE_XDATA
    423          
    424          /*********************************************************************
    425           * @fn      SampleApp_SendPeriodicMessage
    426           *
    427           * @brief   Send the periodic message.
    428           *
    429           * @param   none
    430           *
    431           * @return  none
    432           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    433          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    434          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    435            uchar waring[1] = "w";
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant "w">` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant "w">` & 0xff
   \   00001A   7401         MOV     A,#0x1
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    436            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    437                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    438                                 1,
    439                                 waring,
    440                                 &SampleApp_TransID,
    441                                 AF_DISCV_ROUTE,
    442                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00001F                ; Setup parameters for call to function AF_DataRequest
   \   00001F   75..1E       MOV     ?V0 + 0,#0x1e
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000027   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00002A   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7403         MOV     A,#0x3
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   8582..       MOV     ?V0 + 0,DPL
   \   00003A   8583..       MOV     ?V0 + 1,DPH
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   75..01       MOV     ?V0 + 0,#0x1
   \   000045   75..00       MOV     ?V0 + 1,#0x0
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   7920         MOV     R1,#0x20
   \   000054   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000056   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000058   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00005A   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00005C   12....       LCALL   ??AF_DataRequest?relay
   \   00005F   7409         MOV     A,#0x9
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
    443            {
    444            }
    445            else
    446            {
    447              // Error occurred in request to send.
    448            }
    449            /*uchar waring[1] = "w";
    450            char str[4];
    451            char str1[5];
    452            char strTemp[12];
    453            char strGas[12];
    454            uchar TempGas[14];
    455            float temp;
    456            uint Gas;
    457          
    458            temp = floatReadDs18B20();              //读取温度数据
    459            Gas  = ReadGasData();                   //模拟值读取函数
    460            sprintf(str, "%4.1f", temp);
    461            sprintf(str1, "%-5.2f", (Gas-8)/1.28); //将浮点数转成字符串
    462            if(Gas>15)
    463              BEEP_Flag = 1;
    464            else
    465              BEEP_Flag = 0;
    466            if(BEEP_Flag == 1)
    467            {RLED = !RLED; GLED = 0; BEEP = !BEEP;}
    468            else
    469            {RLED = 0; GLED = 1; BEEP = 1;}
    470            if(TIM_conter == 10)
    471            {
    472              BEEP_Flag = 0;
    473            }*/
    474            
    475          /*  if(Gas>15)
    476            {RLED = !RLED; GLED = 0; BEEP = !BEEP;}
    477            else
    478            {RLED = 0; GLED = 1; BEEP = 1;}*/
    479                 
    480          /*  HalUARTWrite(0, "TEMP:", 5);           //串口输出提示信息
    481            HalUARTWrite(0, str, 4);
    482            HalUARTWrite(0, "   ",3);
    483            HalUARTWrite(0, "GAS:",4);
    484            HalUARTWrite(0, str1, 4);
    485            HalUARTWrite(0, "%", 1);
    486            HalUARTWrite(0, "\r\n",2);*/
    487          
    488           /* osal_memcpy(strTemp, "TEMP:", 5);
    489            osal_memcpy(&strTemp[5], str, 4);
    490            osal_memcpy(&strTemp[9], " C\0", 3);
    491            
    492            osal_memcpy(strGas, "GAS :", 5);
    493            osal_memcpy(&strGas[5], str1, 5);
    494            osal_memcpy(&strGas[10], "%\0", 2);
    495            
    496            osal_memcpy(&TempGas[0], str, 4);
    497            osal_memcpy(&TempGas[4], " GAS:",5);
    498            osal_memcpy(&TempGas[9], str1, 5);
    499            
    500            
    501            
    502            HalLcdWriteString(strTemp, HAL_LCD_LINE_3);
    503            HalLcdWriteString(strGas , HAL_LCD_LINE_4);//LCD显示
    504             
    505            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    506                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    507                                 14,
    508                                 TempGas,
    509                                 &SampleApp_TransID,
    510                                 AF_DISCV_ROUTE,
    511                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    512            {
    513            }
    514            else
    515            {
    516              // Error occurred in request to send.
    517            }
    518            if(Gas>15)
    519            {
    520              if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    521                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    522                                 1,
    523                                 waring,
    524                                 &SampleApp_TransID,
    525                                 AF_DISCV_ROUTE,
    526                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    527             {
    528             }
    529            }*/
    530          }
   \   000064   7401         MOV     A,#0x1
   \   000066                REQUIRE ?Subroutine0
   \   000066                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine1_0
   \   000003                ; // Fall through to label ??Subroutine1_0
    531          
    532          /*********************************************************************
    533           * @fn      SampleApp_SendFlashMessage
    534           *
    535           * @brief   Send the flash message to group 1.
    536           *
    537           * @param   flashTime - in milliseconds
    538           *
    539           * @return  none
    540           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    541          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    542          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    543            uint8 buffer[3];
    544            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    545            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    546            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    547          
    548            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    549                                 SAMPLEAPP_FLASH_CLUSTERID,
    550                                 3,
    551                                 buffer,
    552                                 &SampleApp_TransID,
    553                                 AF_DISCV_ROUTE,
    554                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    555            {
    556            }
    557            else
    558            {
    559              // Error occurred in request to send.
    560            }
    561          }
   \   000071   7403         MOV     A,#0x3
   \   000073   80..         SJMP    ?Subroutine0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadGasData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadGasData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n">`:
   \   000000   0D0A00       DB "\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UNUSUAL :">`:
   \   000000   554E5553     DB "UNUSUAL :"
   \            55414C20
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TEMP:">`:
   \   000000   54454D50     DB "TEMP:"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "w">`:
   \   000000   77           DB 77H
    562          
    563          /*********************************************************************
    564           * @fn      SampleApp_Send_P2P_Message
    565           *
    566           * @brief   point to point.
    567           *
    568           * @param   none
    569           *
    570           * @return  none
    571           */
    572          /*void SampleApp_Send_P2P_Message( void )
    573          {
    574            char str[4];
    575            char str1[5];
    576            char strTemp[12];
    577            char strGas[12];
    578            char TempGas[14];
    579            float temp;
    580            int Gas;
    581          
    582            temp = floatReadDs18B20();              //读取温度数据
    583            Gas  = ReadGasData();                   //模拟值读取函数
    584            sprintf(str, "%4.1f", temp);
    585            sprintf(str1, "%-5.2f", (Gas-8)/1.28); //将浮点数转成字符串
    586            
    587            if(Gas>15)
    588            {RLED = !RLED; GLED = 0; BEEP = !BEEP;}
    589            else
    590            {RLED = 0; GLED = 1; BEEP = 1;}
    591                 
    592            HalUARTWrite(0, "TEMP:", 5);           //串口输出提示信息
    593            HalUARTWrite(0, str, 4);
    594            HalUARTWrite(0, "   ",3);
    595            HalUARTWrite(0, "GAS:",4);
    596            HalUARTWrite(0, str1, 4);
    597            HalUARTWrite(0, "%", 1);
    598            HalUARTWrite(0, "\r\n",2);
    599          
    600            osal_memcpy(strTemp, "TEMP:", 5);
    601            osal_memcpy(&strTemp[5], str, 4);
    602            osal_memcpy(&strTemp[9], " C\0", 3);
    603            
    604            osal_memcpy(strGas, "GAS :", 5);
    605            osal_memcpy(&strGas[5], str1, 5);
    606            osal_memcpy(&strGas[10], "%\0", 2);
    607            
    608            osal_memcpy(&TempGas[0], str, 4);
    609            osal_memcpy(&TempGas[4], " GAS:",5);
    610            osal_memcpy(&TempGas[9], str1, 5);
    611            
    612            
    613            
    614            HalLcdWriteString(strTemp, HAL_LCD_LINE_3);
    615            HalLcdWriteString(strGas , HAL_LCD_LINE_4);//LCD显示
    616            
    617             
    618            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    619                                 SAMPLEAPP_P2P_CLUSTERID,
    620                                 14,
    621                                 TempGas,
    622                                 &SampleApp_TransID,
    623                                 AF_DISCV_ROUTE,
    624                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    625            {
    626            }
    627            else
    628            {
    629              // Error occurred in request to send.
    630            }
    631            osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    632                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
    633          }*/
    634          /*********************************************************************
    635          *********************************************************************/
    636          
    637          
    638          
    639          
    640          
    641          
    642          
    643          
    644          
    645          
    646          
    647          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ReadGasData                        0      0      0
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     31
       -> osal_memset                   0      0     32
       -> osal_memcpy                   0      0     38
       -> SampleApp_SendPeriodicMessage
                                        0      0     32
       -> HalUARTWrite                  0      0     32
       -> HalUARTWrite                  0      0     32
       -> HalUARTWrite                  0      0     32
       -> HalUARTWrite                  0      0     32
       -> HalUARTWrite                  0      0     32
       -> HalLedBlink                   0      0     32
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      2      0     36
       -> AF_DataRequest                0      0     40


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     ADCCON1                                  1
     ADCCON3                                  1
     ADCL                                     1
     ADCH                                     1
     ADCCFG                                   1
     P0SEL                                    1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_P2P_DstAddr                   12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     TIM_conter                               1
     BEEP_Flag                                1
     ReadGasData                             25
     SampleApp_Init                         171
     SampleApp_ProcessEvent                 176
     SampleApp_HandleKeys                    62
     ??Subroutine1_0                          5
     SampleApp_MessageMSGCB                 275
     SampleApp_SendPeriodicMessage          102
     ?Subroutine0                             3
     SampleApp_SendFlashMessage             117
     ??ReadGasData?relay                      6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "\r\n">                       3
     ?<Constant "UNUSUAL :">                 10
     ?<Constant "TEMP:">                      6
     ?<Constant "w">                          1

 
 936 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
   6 bytes in segment SFR_AN
  54 bytes in segment XDATA_ROM_C
  67 bytes in segment XDATA_Z
 
 978 bytes of CODE  memory
  54 bytes of CONST memory
   0 bytes of DATA  memory (+ 6 bytes shared)
  67 bytes of XDATA memory

Errors: none
Warnings: none
