///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        06/Jan/2021  10:23:24 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\Source\Sa /
//                          mpleApp.c                                         /
//    Command line       =  -f C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3 /
//                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530 /
//                          DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg           /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wConfig.cfg             /
//                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR     /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\小安\Desktop\GAS_ /
//                          ED\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp /
//                          les\SampleApp\Source\SampleApp.c -D ZIGBEEPRO -D  /
//                          ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D           /
//                          xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC           /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          CoordinatorEB-Pro\List\ -lA                       /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          CoordinatorEB-Pro\List\ --diag_suppress           /
//                          Pe001,Pa010 -o C:\Users\小安\Desktop\GAS_ED\ZStac /
//                          k-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\Samp /
//                          leApp\CC2530DB\CoordinatorEB-Pro\Obj\ -e --debug  /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                           -I C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2. /
//                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\SOURCE\ -I C:\Users\小安\Desktop\GAS_ED\ZS /
//                          tack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\S /
//                          ampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I     /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\MT\ -I                  /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I         /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\    /
//                          -I C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3 /
//                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530 /
//                          DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I   /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I        /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\AF\ -I            /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\NWK\ -I           /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\SEC\ -I           /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I          /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\SYS\ -I           /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I           /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I            /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\ZMAC\ -I                /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I      /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I      /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I         /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I      /
//                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\    /
//                          -I C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3 /
//                          .0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530 /
//                          DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ /
//                          SINGLE_CHIP\ -Ohz --require_prototypes            /
//    List file          =  C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          CoordinatorEB-Pro\List\SampleApp.s51              /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_DIV
        EXTERN ?L_ADD
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UL_GE_X
        EXTERN ?UL_SHR
        EXTERN ?UL_TO_FLT
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??ReadGasData?relay
        FUNCTION ??ReadGasData?relay,0203H
        PUBLIC ??SampleApp_HandleKeys?relay
        FUNCTION ??SampleApp_HandleKeys?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??SampleApp_SendFlashMessage?relay
        FUNCTION ??SampleApp_SendFlashMessage?relay,0203H
        PUBLIC ??SampleApp_SendPeriodicMessage?relay
        FUNCTION ??SampleApp_SendPeriodicMessage?relay,0203H
        PUBWEAK ADCCFG
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBLIC BEEP_Flag
        PUBWEAK P0SEL
        PUBLIC ReadGasData
        FUNCTION ReadGasData,0203H
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_P2P_DstAddr
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SendFlashMessage
        FUNCTION SampleApp_SendFlashMessage,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC SampleApp_SendPeriodicMessage
        FUNCTION SampleApp_SendPeriodicMessage,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 88, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBLIC TIM_conter
        PUBWEAK _A_P1
        PUBWEAK __Constant_0
        PUBWEAK __Constant_41a3c28f
        PUBWEAK __Constant_ffb
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_rand           SYMBOL "osal_rand"
aps_FindGroup       SYMBOL "aps_FindGroup"
aps_RemoveGroup     SYMBOL "aps_RemoveGroup"
osal_memset         SYMBOL "osal_memset"
HalUARTWrite        SYMBOL "HalUARTWrite"
HalLedBlink         SYMBOL "HalLedBlink"
floatReadDs18B20    SYMBOL "floatReadDs18B20"
AF_DataRequest      SYMBOL "AF_DataRequest"
sprintf             SYMBOL "sprintf"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??aps_FindGroup?relay SYMBOL "?relay", aps_FindGroup
??aps_RemoveGroup?relay SYMBOL "?relay", aps_RemoveGroup
??floatReadDs18B20?relay SYMBOL "?relay", floatReadDs18B20
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??sprintf?relay     SYMBOL "?relay", sprintf
ReadGasData         SYMBOL "ReadGasData"
??ReadGasData?relay SYMBOL "?relay", ReadGasData
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
??SampleApp_HandleKeys?relay SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
SampleApp_SendFlashMessage SYMBOL "SampleApp_SendFlashMessage"
??SampleApp_SendFlashMessage?relay SYMBOL "?relay", SampleApp_SendFlashMessage
SampleApp_SendPeriodicMessage SYMBOL "SampleApp_SendPeriodicMessage"
??SampleApp_SendPeriodicMessage?relay SYMBOL "?relay", SampleApp_SendPeriodicMessage

        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroup
        FUNCTION aps_FindGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_RemoveGroup
        FUNCTION aps_RemoveGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN floatReadDs18B20
        FUNCTION floatReadDs18B20,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 88, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 83, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??aps_FindGroup?relay
        FUNCTION ??aps_FindGroup?relay,00H
        EXTERN ??aps_RemoveGroup?relay
        FUNCTION ??aps_RemoveGroup?relay,00H
        EXTERN ??floatReadDs18B20?relay
        FUNCTION ??floatReadDs18B20?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H

// C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 #include <stdio.h>
//    2 #include "OSAL.h"
//    3 #include "ZGlobals.h"
//    4 #include "AF.h"
//    5 #include "aps_groups.h"
//    6 #include "ZDApp.h"
//    7 
//    8 #include "SampleApp.h"
//    9 #include "SampleAppHw.h"
//   10 
//   11 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr ADCCFG
ADCCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1
//   12 
//   13 /* HAL */
//   14 #include "hal_lcd.h"
//   15 #include "hal_led.h"
//   16 #include "hal_key.h"
//   17 #include "MT_UART.h"
//   18 #include "MT_APP.h"
//   19 #include "MT.h"
//   20 #include "ds18b20.h"
//   21 
//   22 /*********************************************************************
//   23  * MACROS
//   24  */
//   25 #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
//   26 
//   27 #define BEEP P1_4
//   28 #define GLED P1_5
//   29 #define RLED P1_6
//   30 
//   31 #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
//   32 #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
//   33 #define HAL_ADC_DEC_256     0x20    /* Decimate by 256 : 12-bit resolution */
//   34 #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
//   35 #define HAL_ADC_DEC_BITS    0x30    /* Bits [5:4] */
//   36 #define HAL_ADC_CHANNEL_6          0x06
//   37 
//   38 #define uint unsigned int
//   39 #define uchar unsigned char
//   40 
//   41 #define ADC_STOP()  st( ADCCON1 |= 0x30; )
//   42 
//   43 // Macro for initiating a single sample in single-conversion mode (ADCCON1.STSEL = 11).
//   44 #define ADC_SAMPLE_SINGLE()       \ 
//   45   st( ADC_STOP();                 \ 
//   46       ADCCON1 |= 0x40; )
//   47 
//   48 #define st(x)      do { x } while (__LINE__ == -1)
//   49 /*********************************************************************
//   50  * CONSTANTS
//   51  */
//   52 
//   53 /*********************************************************************
//   54  * TYPEDEFS
//   55  */
//   56 
//   57 /*********************************************************************
//   58  * GLOBAL VARIABLES
//   59  */
//   60 
//   61 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   62 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
//   63 {
//   64   SAMPLEAPP_PERIODIC_CLUSTERID,
//   65   SAMPLEAPP_FLASH_CLUSTERID
//   66 };
//   67 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   68 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SampleApp_ClusterList
//   69 {
//   70   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//   71   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//   72   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//   73   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//   74   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//   75   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//   76   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//   77   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//   78   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//   79 };
//   80 
//   81 // This is the Endpoint/Interface description.  It is defined here, but
//   82 // filled-in in SampleApp_Init().  Another way to go would be to fill
//   83 // in the structure here and make it a "const" (in code space).  The
//   84 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   85 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   86 
//   87 /*********************************************************************
//   88  * EXTERNAL VARIABLES
//   89  */
//   90 
//   91 /*********************************************************************
//   92  * EXTERNAL FUNCTIONS
//   93  */
//   94 
//   95 /*********************************************************************
//   96  * LOCAL VARIABLES
//   97  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   98 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   99                           // This variable will be received when
//  100                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  101 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  102 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  103 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  104 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  105 afAddrType_t SampleApp_Periodic_DstAddr; //广播
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  106 afAddrType_t SampleApp_Flash_DstAddr;    //组播
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  107 afAddrType_t SampleApp_P2P_DstAddr;      //点播
SampleApp_P2P_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  108 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  109 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  110 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  111 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  112 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  113 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  114 uint8 TIM_conter = 0;
TIM_conter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  115 byte BEEP_Flag = 0;
BEEP_Flag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  116 
//  117 /*********************************************************************
//  118  * LOCAL FUNCTIONS
//  119  */
//  120 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  121 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  122 void SampleApp_SendPeriodicMessage( void );
//  123 void SampleApp_SendFlashMessage( uint16 flashTime );
//  124 void SampleApp_Send_P2P_Message(void);
//  125 uint ReadGasData( void );
//  126 void Waring(uint);
//  127 void DelayMS(uint msec);
//  128 void LCD_P8x16Str(unsigned char x, unsigned char y,unsigned char ch[]);
//  129 
//  130 
//  131 /*********************************************************************
//  132  * NETWORK LAYER CALLBACKS
//  133  */
//  134 
//  135 /*********************************************************************
//  136  * PUBLIC FUNCTIONS
//  137  */
//  138 
//  139 /*********************************************************************
//  140  * @fn      SampleApp_Init
//  141  *
//  142  * @brief   Initialization function for the Generic App Task.
//  143  *          This is called during initialization and should contain
//  144  *          any application specific initialization (ie. hardware
//  145  *          initialization/setup, table initialization, power up
//  146  *          notificaiton ... ).
//  147  *
//  148  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  149  *                    used to send messages and set timers.
//  150  *
//  151  * @return  none
//  152  */
//  153 /****************************************************************************
//  154 * ADC读取函数
//  155 ****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  156 uint ReadGasData( void )
ReadGasData:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ReadGasData
        CODE
//  157 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
//  158   uint value = 0;
//  159   long unsigned int AdcValue = 0;
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
//  160   
//  161   /* Enable channel */
//  162   ADCCFG |= 0x40;
        ORL     0xf2,#0x40
//  163   
//  164   /* writing to this register starts the extra conversion */
//  165   //ADCCON3 = 0x86;// 0x87;
//  166   ADCCON3 = 0xB6;
        MOV     0xb6,#-0x4a
//  167   for(int i=0; i<4; i++)
        MOV     R4,#0x4
//  168   {
//  169     ADCCON3 = 0xB6;
??ReadGasData_0:
        MOV     0xb6,#-0x4a
//  170     ADC_SAMPLE_SINGLE(); 
        ORL     0xb4,#0x30
        ORL     0xb4,#0x40
//  171     while(!(ADCCON1 & 0x80));              //等待AD转换完成
??ReadGasData_1:
        MOV     A,0xb4
        MOV     C,0xE0 /* A   */.7
        JNC     ??ReadGasData_1
//  172     /*value =  ADCL >> 2;                  //ADCL寄存器低2位无效
//  173     value |= (((uint)ADCH) << 6); */    
//  174     value = ADCL>>4;                      
        MOV     A,0xba
//  175     value |= (((uint)ADCH) << 4);         
//  176     AdcValue += value;  
        SWAP    A
        ANL     A,#0xf
        MOV     R2,A
        MOV     ?V0 + 0,0xbb
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,R2
        ORL     A,?V0 + 0
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_ADD
//  177   }
        DEC     R4
        MOV     A,R4
        JNZ     ??ReadGasData_0
//  178   AdcValue = AdcValue >> 2;                 //累加除以4，得到平均值
        MOV     A,#0x2
        MOV     R0,#?V0 + 4
        LCALL   ?UL_SHR
//  179   if(AdcValue > 4090)   // 输入的电压0V时，因为会满量程，检测到AdcValue的12位值为0xfff
        MOV     DPTR,#__Constant_ffb
        MOV     R0,#?V0 + 4
        LCALL   ?UL_GE_X
        JNC     ??ReadGasData_2
//  180     AdcValue = 0;
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
//  181   
//  182   
//  183   return (AdcValue);
??ReadGasData_2:
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
        REQUIRE ADCCFG
        REQUIRE ADCCON3
        REQUIRE ADCCON1
        REQUIRE ADCL
        REQUIRE ADCH
//  184 }
//  185 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  186 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  187 { 
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  188   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  189   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  190   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  191   
//  192   MT_UartInit();                  //串口初始化
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  193   MT_UartRegisterTaskID(task_id); //注册串口任务
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  194   P0SEL &= 0x7f;                  //DS18B20的io口初始化 p0.7
        ANL     0xf3,#0x7f
//  195   
//  196   // Device hardware initialization can be added here or in main() (Zmain.c).
//  197   // If the hardware is application specific - add it here.
//  198   // If the hardware is other parts of the device add it in main().
//  199 
//  200  #if defined ( BUILD_ALL_DEVICES )
//  201   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  202   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  203   // together - if they are - we will start up a coordinator. Otherwise,
//  204   // the device will start as a router.
//  205   if ( readCoordinatorJumper() )
//  206     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  207   else
//  208     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  209 #endif // BUILD_ALL_DEVICES
//  210 
//  211 #if defined ( HOLD_AUTO_START )
//  212   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  213   //  from starting the device and wait for the application to
//  214   //  start the device.
//  215   ZDOInitDevice(0);
//  216 #endif
//  217 
//  218   // Setup for the periodic message's destination address
//  219   // Broadcast to everyone
//  220   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  221   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  222   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  223 
//  224   // Setup for the flash command's destination address - Group 1
//  225   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  226   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  227   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  228 
//  229   // Fill out the endpoint description.
//  230   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  231   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  232   SampleApp_epDesc.simpleDesc
//  233             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  234   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  235 
//  236   // Register the endpoint description with the AF
//  237   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  238 
//  239   // Register for all key events - This app will handle all key events
//  240   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  241 
//  242   // By default, all devices start out in Group 1
//  243   SampleApp_Group.ID = 0x0001;
        MOV     DPTR,#SampleApp_Group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  244   osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_Group + 2) & 0xff
        MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL   ??Subroutine3_0 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  245   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  246 
//  247 #if defined ( LCD_SUPPORTED )
//  248   HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "SampleApp">` & 0xff
        MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
        CFI EndBlock cfiBlock1
//  249 #endif
//  250 }
        REQUIRE ?Subroutine0
        REQUIRE P0SEL
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  251 
//  252 /*********************************************************************
//  253  * @fn      SampleApp_ProcessEvent
//  254  *
//  255  * @brief   Generic Application Task event processor.  This function
//  256  *          is called to process all events for the task.  Events
//  257  *          include timers, messages and any other user defined events.
//  258  *
//  259  * @param   task_id  - The OSAL assigned task ID.
//  260  * @param   events - events to process.  This is a bit map and can
//  261  *                   contain more than one event.
//  262  *
//  263  * @return  none
//  264  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  265 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  266 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_SendPeriodicMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  267   afIncomingMSGPacket_t *MSGpkt;
//  268   (void)task_id;  // Intentionally unreferenced parameter
//  269 
//  270   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//  271   {
//  272     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  273     while ( MSGpkt )
//  274     {
//  275       switch ( MSGpkt->hdr.event )
//  276       {
//  277         // Received when a key is pressed
//  278         case KEY_CHANGE:
//  279           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  280           break;
//  281 
//  282         // Received when a messages is received (OTA) for this endpoint
//  283         case AF_INCOMING_MSG_CMD:
//  284           SampleApp_MessageMSGCB( MSGpkt );
//  285           break;
//  286 
//  287         // Received whenever the device changes state in the network
//  288         case ZDO_STATE_CHANGE:
//  289           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  290           if (  //(SampleApp_NwkState == DEV_ZB_COORD) ||
//  291                  (SampleApp_NwkState == DEV_ROUTER)
//  292               || (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_ProcessEvent_4
//  293           {
//  294             // Start sending the periodic message in a regular interval.
//  295             osal_start_timerEx( SampleApp_TaskID,
//  296                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  297                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  298           }
//  299           else
//  300           {
//  301             // Device is no longer in the network
//  302           }
//  303           break;
//  304 
//  305         default:
//  306           break;
//  307       }
//  308 
//  309       // Release the memory
//  310       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  311 
//  312       // Next - if one is available
//  313       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??SampleApp_ProcessEvent_5
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_6
        ADD     A,#0x5a
        JZ      ??SampleApp_ProcessEvent_7
        ADD     A,#-0x11
        JZ      ??SampleApp_ProcessEvent_2
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_7:
        ; Setup parameters for call to function SampleApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SampleApp_HandleKeys?relay
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??SampleApp_ProcessEvent_4
//  314     }
//  315 
//  316     // return unprocessed events
//  317     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_8:
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_9
//  318   }
//  319 
//  320   // Send a message out - This event is generated by a timer
//  321   //  (setup in SampleApp_Init()).
//  322   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_10
//  323   {
//  324     // Send the periodic message
//  325     SampleApp_SendPeriodicMessage();
        ; Setup parameters for call to function SampleApp_SendPeriodicMessage
        LCALL   ??SampleApp_SendPeriodicMessage?relay
//  326     //SampleApp_Send_P2P_Message();
//  327 
//  328     // Setup to send message again in normal period (+ a little jitter)
//  329     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  330         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0x18
        MOV     R4,A
        CLR     A
        ADDC    A,#0x3
        MOV     R5,A
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  331 
//  332     // return unprocessed events
//  333     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_8
//  334   }
//  335 
//  336   // Discard unknown events
//  337   return 0;
??SampleApp_ProcessEvent_10:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_9:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  338 }
//  339 
//  340 /*********************************************************************
//  341  * Event Generation Functions
//  342  */
//  343 /*********************************************************************
//  344  * @fn      SampleApp_HandleKeys
//  345  *
//  346  * @brief   Handles all key events for this device.
//  347  *
//  348  * @param   shift - true if in shift/alt.
//  349  * @param   keys - bit field for key events. Valid entries:
//  350  *                 HAL_KEY_SW_2
//  351  *                 HAL_KEY_SW_1
//  352  *
//  353  * @return  none
//  354  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  355 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function SampleApp_HandleKeys
        CODE
//  356 {
        FUNCALL SampleApp_HandleKeys, SampleApp_SendFlashMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_FindGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_RemoveGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  357   (void)shift;  // Intentionally unreferenced parameter
//  358   
//  359   if ( keys & HAL_KEY_SW_1 )
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_HandleKeys_0
//  360   {
//  361     /* This key sends the Flash Command is sent to Group 1.
//  362      * This device will not receive the Flash Command from this
//  363      * device (even if it belongs to group 1).
//  364      */
//  365     SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
        ; Setup parameters for call to function SampleApp_SendFlashMessage
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??SampleApp_SendFlashMessage?relay
//  366   }
//  367 
//  368   if ( keys & HAL_KEY_SW_2 )
??SampleApp_HandleKeys_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.1
        JNC     ??SampleApp_HandleKeys_1
//  369   {
//  370     /* The Flashr Command is sent to Group 1.
//  371      * This key toggles this device in and out of group 1.
//  372      * If this device doesn't belong to group 1, this application
//  373      * will not receive the Flash command sent to group 1.
//  374      */
//  375     aps_Group_t *grp;
//  376     grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
//  377     if ( grp )
        ; Setup parameters for call to function aps_FindGroup
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x14
        LCALL   ??aps_FindGroup?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??SampleApp_HandleKeys_2
//  378     {
//  379       // Remove from the group
//  380       aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
        ; Setup parameters for call to function aps_RemoveGroup
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x14
        LCALL   ??aps_RemoveGroup?relay
        SJMP    ??SampleApp_HandleKeys_1
//  381     }
//  382     else
//  383     {
//  384       // Add to the flash group
//  385       aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
??SampleApp_HandleKeys_2:
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
        CFI EndBlock cfiBlock4
//  386     }
//  387   }
//  388 }
??SampleApp_HandleKeys_1:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  389 
//  390 /*********************************************************************
//  391  * LOCAL FUNCTIONS
//  392  */
//  393 
//  394 /*********************************************************************
//  395  * @fn      SampleApp_MessageMSGCB
//  396  *
//  397  * @brief   Data message processor callback.  This function processes
//  398  *          any incoming data - probably from other devices.  So, based
//  399  *          on cluster ID, perform the intended action.
//  400  *
//  401  * @param   none
//  402  *
//  403  * @return  none
//  404  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  405 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  406 {
        FUNCALL SampleApp_MessageMSGCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  407   uint16 flashTime;
//  408   byte buf[2];
//  409 
//  410   switch ( pkt->clusterId )
        MOV     A,R2
        ADD     A,#0x21
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for SampleApp_MessageMSGCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_2
        CODE
//  411   {  
//  412     case SAMPLEAPP_PERIODIC_CLUSTERID:
//  413       
//  414       osal_memset(buf, 0 , 2);
??SampleApp_MessageMSGCB_1:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  415       osal_memcpy(buf, pkt->cmd.Data, 1); //复制数据到缓冲区中
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  416    
//  417       if(buf[0]=='w')      //判断收到的数据是否为"w" 
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x77
        JNZ     ??SampleApp_MessageMSGCB_0
//  418       {BEEP_Flag = 1; HalUARTWrite(0, "UNUSUAL", 5);}    //报警标志置1，提示接收成功
        MOV     DPTR,#BEEP_Flag
        MOV     A,#0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "UNUSUAL">` & 0xff
        MOV     R3,#(`?<Constant "UNUSUAL">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        SJMP    ??SampleApp_MessageMSGCB_0
//  419       /*HalUARTWrite(0, "TEMP:", 5);       //提示接收到数据
//  420       HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength);//输出接收到的数据
//  421       HalUARTWrite(0, "%", 1);
//  422       HalUARTWrite(0, "\r\n", 2);         // 回车换行*/
//  423       break;
//  424 
//  425     case SAMPLEAPP_FLASH_CLUSTERID:
//  426       flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
//  427       HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
??SampleApp_MessageMSGCB_2:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        ; Setup parameters for call to function HalLedBlink
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 1,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R3,#0x32
        MOV     R2,#0x4
        MOV     R1,#0x8
        LCALL   ??HalLedBlink?relay
//  428       break;
//  429   }
//  430 }
??SampleApp_MessageMSGCB_0:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20
        REQUIRE ??Subroutine3_0
        ; // Fall through to label ??Subroutine3_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine3_0:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_0
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 82)
        CFI Block cfiPicker35 Using cfiCommon1
        CFI (cfiPicker35) NoFunction
        CFI (cfiPicker35) Picker
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiPicker35
//  431 
//  432 /*********************************************************************
//  433  * @fn      SampleApp_SendPeriodicMessage
//  434  *
//  435  * @brief   Send the periodic message.
//  436  *
//  437  * @param   none
//  438  *
//  439  * @return  none
//  440  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  441 void SampleApp_SendPeriodicMessage( void )
SampleApp_SendPeriodicMessage:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function SampleApp_SendPeriodicMessage
        CODE
//  442 {
        FUNCALL SampleApp_SendPeriodicMessage, floatReadDs18B20
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, ReadGasData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 88, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 88, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 83, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 83, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 83, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 83, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 81, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 81, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 82, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 82, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 79, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 79, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 88, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 88, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 60
        MOV     A,#-0x3c
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  443   uchar waring[1] = "w";
        MOV     DPTR,#`?<Constant "w">`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "w">` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x1
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  444   char str[4];
//  445   char str1[5];
//  446   char strTemp[12];
//  447   char strGas[12];
//  448   uchar TempGas[21];
//  449   uchar EN_ID[5];
//  450   
//  451   float temp;
//  452   uint Gas;
//  453 
//  454   temp = floatReadDs18B20();              //读取温度数据
        ; Setup parameters for call to function floatReadDs18B20
        LCALL   ??floatReadDs18B20?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
//  455   Gas  = ReadGasData();                   //模拟值读取函数
        ; Setup parameters for call to function ReadGasData
        LCALL   ??ReadGasData?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  456   
//  457   if(Gas<200) Gas = 200;
        CLR     C
        MOV     A,R6
        SUBB    A,#-0x38
        MOV     A,R7
        SUBB    A,#0x0
        JNC     ??SampleApp_SendPeriodicMessage_0
        MOV     R6,#-0x38
        MOV     R7,#0x0
        SJMP    ??SampleApp_SendPeriodicMessage_1
//  458   //if(Gas>300) BEEP_Flag = 1;
//  459   if(Gas > 300)                                            //发送报警标志
??SampleApp_SendPeriodicMessage_0:
        CLR     C
        MOV     A,R6
        SUBB    A,#0x2d
        MOV     A,R7
        SUBB    A,#0x1
        JC      ??SampleApp_SendPeriodicMessage_1
//  460   {
//  461     if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  462                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  463                        1,
//  464                        waring,
//  465                        &SampleApp_TransID,
//  466                        AF_DISCV_ROUTE,
//  467                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 80)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 84)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 86)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 88)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
        MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  468    {
//  469       BEEP_Flag = 1;
        MOV     DPTR,#BEEP_Flag
        MOV     A,#0x1
        MOVX    @DPTR,A
//  470    }
//  471    else  BEEP_Flag = 1;;
//  472   }
//  473   
//  474   sprintf(str, "%2.1f", temp);
??SampleApp_SendPeriodicMessage_1:
        ; Setup parameters for call to function sprintf
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 83)
        MOV     R4,#`?<Constant "%2.1f">` & 0xff
        MOV     R5,#(`?<Constant "%2.1f">` >> 8) & 0xff
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  475   sprintf(str1, "%-5.2f", (Gas-200)/20.47);  //将浮点数转成字符串
        ; Setup parameters for call to function sprintf
        MOV     A,R6
        ADD     A,#0x38
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_41a3c28f
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 83)
        MOV     R4,#`?<Constant "%-5.2f">` & 0xff
        MOV     R5,#(`?<Constant "%-5.2f">` >> 8) & 0xff
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  476   
//  477   sprintf(EN_ID, "%x", NLME_GetShortAddr());
        ; Setup parameters for call to function sprintf
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 81)
        MOV     R4,#`?<Constant "%x">` & 0xff
        MOV     R5,#(`?<Constant "%x">` >> 8) & 0xff
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  478 /*  EN_ID[0] = NLME_GetShortAddr()/16/16/16 + '0';
//  479   EN_ID[1] = NLME_GetShortAddr()/16/16%16 + '0';
//  480   EN_ID[2] = NLME_GetShortAddr()/16%16 + '0';
//  481   EN_ID[3] = NLME_GetShortAddr()%16 + '0';*/
//  482   EN_ID[4] = '\0';
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  483 
//  484   
//  485   if(BEEP_Flag == 1)                         //判断标志位
        MOV     DPTR,#BEEP_Flag
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SampleApp_SendPeriodicMessage_2
//  486   {RLED = !RLED; GLED = 0; BEEP = !BEEP;}
        SETB    B.0
        MOV     C,0x90.6
        JNB     B.0,??SampleApp_SendPeriodicMessage_3
        CPL     C
??SampleApp_SendPeriodicMessage_3:
        MOV     0x90.6,C
        CLR     0x90.5
        MOV     C,0x90.4
        JNB     B.0,??SampleApp_SendPeriodicMessage_4
        CPL     C
??SampleApp_SendPeriodicMessage_4:
        MOV     0x90.4,C
        SJMP    ??SampleApp_SendPeriodicMessage_5
//  487   else
//  488   {RLED = 0; GLED = 1; BEEP = 1;}
??SampleApp_SendPeriodicMessage_2:
        CLR     0x90.6
        SETB    0x90.5
        SETB    0x90.4
//  489   
//  490   
//  491   if(TIM_conter == 10)                   //5秒未接收则解除报警
??SampleApp_SendPeriodicMessage_5:
        MOV     DPTR,#TIM_conter
        MOVX    A,@DPTR
        XRL     A,#0xa
        JNZ     ??SampleApp_SendPeriodicMessage_6
//  492   {
//  493     BEEP_Flag = 0;
        MOV     DPTR,#BEEP_Flag
        CLR     A
        MOVX    @DPTR,A
//  494     TIM_conter = 0;
        MOV     DPTR,#TIM_conter
        MOVX    @DPTR,A
//  495   }
//  496   TIM_conter++;
??SampleApp_SendPeriodicMessage_6:
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  497   
//  498 /*  if(Gas>15)
//  499   {RLED = !RLED; GLED = 0; BEEP = !BEEP;}
//  500   else
//  501   {RLED = 0; GLED = 1; BEEP = 1;}*/
//  502        
//  503 /*  HalUARTWrite(0, "TEMP:", 5);           //串口输出提示信息
//  504   HalUARTWrite(0, str, 4);
//  505   HalUARTWrite(0, "   ",3);
//  506   HalUARTWrite(0, "GAS:",4);
//  507   HalUARTWrite(0, str1, 4);
//  508   HalUARTWrite(0, "%", 1);
//  509   HalUARTWrite(0, "\r\n",2);*/
//  510   
//  511   HalUARTWrite(0, EN_ID,5);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  512   
//  513 
//  514   osal_memcpy(strTemp, "TEMP:", 5);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "TEMP:">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "TEMP:">` >> 8) & 0xff
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     A,#0x33
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  515   osal_memcpy(&strTemp[5], str, 4);
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     A,#0x38
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  516   osal_memcpy(&strTemp[9], " C\0", 3);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant " C\\000">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant " C\\000">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     A,#0x3c
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  517   
//  518   osal_memcpy(strGas, "GAS :", 5);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "GAS :">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "GAS :">` >> 8) & 0xff
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     A,#0x27
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  519   osal_memcpy(&strGas[5], str1, 5);
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 5,R2
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  520   osal_memcpy(&strGas[10], "%\0", 2);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 8,#`?<Constant "%\\000">` & 0xff
        MOV     ?V0 + 9,#(`?<Constant "%\\000">` >> 8) & 0xff
        MOV     ?V0 + 10,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,#0x31
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  521   
//  522   osal_memcpy(&TempGas[0], str, 4);
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  523   osal_memcpy(&TempGas[4], " GAS:",5);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant " GAS:">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant " GAS:">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  524   osal_memcpy(&TempGas[9], str1, 5);
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  525   osal_memcpy(&TempGas[14], "%", 1);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "%">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "%">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  526   osal_memcpy(&TempGas[15], " ", 1);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant " ">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant " ">` >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  527   osal_memcpy(&TempGas[16], EN_ID, 4);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  528   
//  529   
//  530   
//  531   HalLcdWriteString(strTemp, HAL_LCD_LINE_3);
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     A,#0x30
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  532   HalLcdWriteString(strGas , HAL_LCD_LINE_4);//LCD显示
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  533    
//  534   if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  535                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  536                        20,
//  537                        TempGas,
//  538                        &SampleApp_TransID,
//  539                        AF_DISCV_ROUTE,
//  540                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 80)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 82)
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 84)
        MOV     ?V0 + 0,#0x14
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 86)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 88)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
        MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 79)
//  541   {
//  542   }
//  543   else
//  544   {
//  545     // Error occurred in request to send.
//  546   }
//  547   /*if(Gas > 300)                                            //发送报警标志
//  548   {
//  549     if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  550                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  551                        1,
//  552                        waring,
//  553                        &SampleApp_TransID,
//  554                        AF_DISCV_ROUTE,
//  555                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
//  556    {
//  557    }
//  558   }*/
//  559 }
        MOV     A,#0x3c
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock36
        REQUIRE _A_P1
//  560 
//  561 /*********************************************************************
//  562  * @fn      SampleApp_SendFlashMessage
//  563  *
//  564  * @brief   Send the flash message to group 1.
//  565  *
//  566  * @param   flashTime - in milliseconds
//  567  *
//  568  * @return  none
//  569  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  570 void SampleApp_SendFlashMessage( uint16 flashTime )
SampleApp_SendFlashMessage:
        CFI Block cfiBlock37 Using cfiCommon0
        CFI Function SampleApp_SendFlashMessage
        CODE
//  571 {
        FUNCALL SampleApp_SendFlashMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  572   uint8 buffer[3];
//  573   buffer[0] = (uint8)(SampleAppFlashCounter++);
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  574   buffer[1] = LO_UINT16( flashTime );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  575   buffer[2] = HI_UINT16( flashTime );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  576 
//  577   if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
//  578                        SAMPLEAPP_FLASH_CLUSTERID,
//  579                        3,
//  580                        buffer,
//  581                        &SampleApp_TransID,
//  582                        AF_DISCV_ROUTE,
//  583                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Flash_DstAddr & 0xff
        MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  584   {
//  585   }
//  586   else
//  587   {
//  588     // Error occurred in request to send.
//  589   }
//  590 }
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock37

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ReadGasData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ReadGasData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendPeriodicMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendFlashMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendFlashMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SampleApp">`:
        DB "SampleApp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "UNUSUAL">`:
        DB "UNUSUAL"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "w">`:
        DB 77H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%2.1f">`:
        DB "%2.1f"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%-5.2f">`:
        DB "%-5.2f"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%x">`:
        DB "%x"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TEMP:">`:
        DB "TEMP:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant " C\\000">`:
        DB 20H, 43H, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "GAS :">`:
        DB "GAS :"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%\\000">`:
        DB 25H, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant " GAS:">`:
        DB " GAS:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant "%">`:
        DB "%"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant " ">`:
        DB " "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_ffb:
        DD 4091

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_41a3c28f:
        DD 41A3C28FH

        END
//  591 
//  592 /*********************************************************************
//  593  * @fn      SampleApp_Send_P2P_Message
//  594  *
//  595  * @brief   point to point.
//  596  *
//  597  * @param   none
//  598  *
//  599  * @return  none
//  600  */
//  601 /*void SampleApp_Send_P2P_Message( void )
//  602 {
//  603   char str[4];
//  604   char str1[5];
//  605   char strTemp[12];
//  606   char strGas[12];
//  607   char TempGas[14];
//  608   float temp;
//  609   int Gas;
//  610 
//  611   temp = floatReadDs18B20();              //读取温度数据
//  612   Gas  = ReadGasData();                   //模拟值读取函数
//  613   sprintf(str, "%4.1f", temp);
//  614   sprintf(str1, "%-5.2f", (Gas-8)/1.28); //将浮点数转成字符串
//  615   
//  616   if(Gas>15)
//  617   {RLED = !RLED; GLED = 0; BEEP = !BEEP;}
//  618   else
//  619   {RLED = 0; GLED = 1; BEEP = 1;}
//  620        
//  621   HalUARTWrite(0, "TEMP:", 5);           //串口输出提示信息
//  622   HalUARTWrite(0, str, 4);
//  623   HalUARTWrite(0, "   ",3);
//  624   HalUARTWrite(0, "GAS:",4);
//  625   HalUARTWrite(0, str1, 4);
//  626   HalUARTWrite(0, "%", 1);
//  627   HalUARTWrite(0, "\r\n",2);
//  628 
//  629   osal_memcpy(strTemp, "TEMP:", 5);
//  630   osal_memcpy(&strTemp[5], str, 4);
//  631   osal_memcpy(&strTemp[9], " C\0", 3);
//  632   
//  633   osal_memcpy(strGas, "GAS :", 5);
//  634   osal_memcpy(&strGas[5], str1, 5);
//  635   osal_memcpy(&strGas[10], "%\0", 2);
//  636   
//  637   osal_memcpy(&TempGas[0], str, 4);
//  638   osal_memcpy(&TempGas[4], " GAS:",5);
//  639   osal_memcpy(&TempGas[9], str1, 5);
//  640   
//  641   
//  642   
//  643   HalLcdWriteString(strTemp, HAL_LCD_LINE_3);
//  644   HalLcdWriteString(strGas , HAL_LCD_LINE_4);//LCD显示
//  645   
//  646    
//  647   if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
//  648                        SAMPLEAPP_P2P_CLUSTERID,
//  649                        14,
//  650                        TempGas,
//  651                        &SampleApp_TransID,
//  652                        AF_DISCV_ROUTE,
//  653                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
//  654   {
//  655   }
//  656   else
//  657   {
//  658     // Error occurred in request to send.
//  659   }
//  660   osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  661                      SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
//  662 }*/
//  663 /*********************************************************************
//  664 *********************************************************************/
//  665 
//  666 
//  667 
// 
// 1 644 bytes in segment BANKED_CODE
//    42 bytes in segment BANK_RELAYS
//     7 bytes in segment SFR_AN
//   100 bytes in segment XDATA_ROM_C
//    67 bytes in segment XDATA_Z
// 
// 1 686 bytes of CODE  memory
//    88 bytes of CONST memory (+ 12 bytes shared)
//     0 bytes of DATA  memory (+  7 bytes shared)
//    67 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
