///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        06/Jan/2021  12:17:23 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\Source\Sampl /
//                          eApp.c                                            /
//    Command line       =  -f C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ  /
//                          -DROOT=__near_func -DBLINK_LEDS) -f               /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0    /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\小安\Desktop\GAS\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\Source\SampleApp.c -D ZIGBEEPRO -D     /
//                          NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D          /
//                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                   /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\End /
//                          DeviceEB-Pro\List\ -lA C:\Users\小安\Desktop\GAS\ /
//                          ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples /
//                          \SampleApp\CC2530DB\EndDeviceEB-Pro\List\         /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\End /
//                          DeviceEB-Pro\Obj\ -e --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\    /
//                          -I C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0- /
//                          1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\SOURCE\ -I C:\Users\小安\Desktop\GAS\ZStack-CC /
//                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleAp /
//                          p\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I            /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MT\ -I                     /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\AF\ -I               /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\NWK\ -I              /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SEC\ -I              /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SAPI\ -I             /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\SYS\ -I              /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\STACK\ZDO\ -I              /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\F8W\ -I               /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\ZMAC\ -I                   /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I         /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I            /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I    /
//                          C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE /
//                          _CHIP\ -Ohz --require_prototypes                  /
//    List file          =  C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SampleApp\CC2530DB\End /
//                          DeviceEB-Pro\List\SampleApp.s51                   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??ReadGasData?relay
        FUNCTION ??ReadGasData?relay,0203H
        PUBLIC ??SampleApp_HandleKeys?relay
        FUNCTION ??SampleApp_HandleKeys?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??SampleApp_SendFlashMessage?relay
        FUNCTION ??SampleApp_SendFlashMessage?relay,0203H
        PUBLIC ??SampleApp_SendPeriodicMessage?relay
        FUNCTION ??SampleApp_SendPeriodicMessage?relay,0203H
        PUBWEAK ADCCFG
        PUBWEAK ADCCON1
        PUBWEAK ADCCON3
        PUBWEAK ADCH
        PUBWEAK ADCL
        PUBLIC BEEP_Flag
        PUBWEAK P0SEL
        PUBLIC ReadGasData
        FUNCTION ReadGasData,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_P2P_DstAddr
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SendFlashMessage
        FUNCTION SampleApp_SendFlashMessage,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC SampleApp_SendPeriodicMessage
        FUNCTION SampleApp_SendPeriodicMessage,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBLIC TIM_conter
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_rand           SYMBOL "osal_rand"
aps_FindGroup       SYMBOL "aps_FindGroup"
aps_RemoveGroup     SYMBOL "aps_RemoveGroup"
osal_memset         SYMBOL "osal_memset"
HalUARTWrite        SYMBOL "HalUARTWrite"
HalLedBlink         SYMBOL "HalLedBlink"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??aps_FindGroup?relay SYMBOL "?relay", aps_FindGroup
??aps_RemoveGroup?relay SYMBOL "?relay", aps_RemoveGroup
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
ReadGasData         SYMBOL "ReadGasData"
??ReadGasData?relay SYMBOL "?relay", ReadGasData
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
??SampleApp_HandleKeys?relay SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
SampleApp_SendFlashMessage SYMBOL "SampleApp_SendFlashMessage"
??SampleApp_SendFlashMessage?relay SYMBOL "?relay", SampleApp_SendFlashMessage
SampleApp_SendPeriodicMessage SYMBOL "SampleApp_SendPeriodicMessage"
??SampleApp_SendPeriodicMessage?relay SYMBOL "?relay", SampleApp_SendPeriodicMessage

        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroup
        FUNCTION aps_FindGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_RemoveGroup
        FUNCTION aps_RemoveGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??aps_FindGroup?relay
        FUNCTION ??aps_FindGroup?relay,00H
        EXTERN ??aps_RemoveGroup?relay
        FUNCTION ??aps_RemoveGroup?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H

// C:\Users\小安\Desktop\GAS\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 #include <stdio.h>
//    2 #include "OSAL.h"
//    3 #include "ZGlobals.h"
//    4 #include "AF.h"
//    5 #include "aps_groups.h"
//    6 #include "ZDApp.h"
//    7 
//    8 #include "SampleApp.h"
//    9 #include "SampleAppHw.h"
//   10 
//   11 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,0b4H
// unsigned char volatile __sfr ADCCON1
ADCCON1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b6H
// unsigned char volatile __sfr ADCCON3
ADCCON3:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0baH
// unsigned char volatile __sfr ADCL
ADCL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0bbH
// unsigned char volatile __sfr ADCH
ADCH:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f2H
// unsigned char volatile __sfr ADCCFG
ADCCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1
//   12 
//   13 /* HAL */
//   14 #include "hal_lcd.h"
//   15 #include "hal_led.h"
//   16 #include "hal_key.h"
//   17 #include "MT_UART.h"
//   18 #include "MT_APP.h"
//   19 #include "MT.h"
//   20 #include "ds18b20.h"
//   21 
//   22 /*********************************************************************
//   23  * MACROS
//   24  */
//   25 #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
//   26 
//   27 #define BEEP P1_4
//   28 #define GLED P1_5
//   29 #define RLED P1_6
//   30 
//   31 #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
//   32 #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
//   33 #define HAL_ADC_DEC_256     0x20    /* Decimate by 256 : 12-bit resolution */
//   34 #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
//   35 #define HAL_ADC_DEC_BITS    0x30    /* Bits [5:4] */
//   36 #define HAL_ADC_CHANNEL_6          0x06
//   37 
//   38 #define uint unsigned int
//   39 #define uchar unsigned char
//   40 /*********************************************************************
//   41  * CONSTANTS
//   42  */
//   43 
//   44 /*********************************************************************
//   45  * TYPEDEFS
//   46  */
//   47 
//   48 /*********************************************************************
//   49  * GLOBAL VARIABLES
//   50  */
//   51 
//   52 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   53 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
//   54 {
//   55   SAMPLEAPP_PERIODIC_CLUSTERID,
//   56   SAMPLEAPP_FLASH_CLUSTERID
//   57 };
//   58 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   59 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SampleApp_ClusterList
//   60 {
//   61   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//   62   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//   63   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//   64   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//   65   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//   66   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//   67   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//   68   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//   69   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//   70 };
//   71 
//   72 // This is the Endpoint/Interface description.  It is defined here, but
//   73 // filled-in in SampleApp_Init().  Another way to go would be to fill
//   74 // in the structure here and make it a "const" (in code space).  The
//   75 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   76 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   77 
//   78 /*********************************************************************
//   79  * EXTERNAL VARIABLES
//   80  */
//   81 
//   82 /*********************************************************************
//   83  * EXTERNAL FUNCTIONS
//   84  */
//   85 
//   86 /*********************************************************************
//   87  * LOCAL VARIABLES
//   88  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   89 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   90                           // This variable will be received when
//   91                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   92 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   93 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   94 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   95 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   96 afAddrType_t SampleApp_Periodic_DstAddr; //广播
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   97 afAddrType_t SampleApp_Flash_DstAddr;    //组播
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   98 afAddrType_t SampleApp_P2P_DstAddr;      //点播
SampleApp_P2P_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   99 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  100 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  101 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  102 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  103 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  104 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  105 uint8 TIM_conter = 0;
TIM_conter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  106 byte BEEP_Flag = 0;
BEEP_Flag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  107 
//  108 /*********************************************************************
//  109  * LOCAL FUNCTIONS
//  110  */
//  111 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  112 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  113 void SampleApp_SendPeriodicMessage( void );
//  114 void SampleApp_SendFlashMessage( uint16 flashTime );
//  115 void SampleApp_Send_P2P_Message(void);
//  116 int ReadGasData( void );
//  117 void Waring(uint);
//  118 void DelayMS(uint msec);
//  119 void LCD_P8x16Str(unsigned char x, unsigned char y,unsigned char ch[]);
//  120 
//  121 
//  122 /*********************************************************************
//  123  * NETWORK LAYER CALLBACKS
//  124  */
//  125 
//  126 /*********************************************************************
//  127  * PUBLIC FUNCTIONS
//  128  */
//  129 
//  130 /*********************************************************************
//  131  * @fn      SampleApp_Init
//  132  *
//  133  * @brief   Initialization function for the Generic App Task.
//  134  *          This is called during initialization and should contain
//  135  *          any application specific initialization (ie. hardware
//  136  *          initialization/setup, table initialization, power up
//  137  *          notificaiton ... ).
//  138  *
//  139  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  140  *                    used to send messages and set timers.
//  141  *
//  142  * @return  none
//  143  */
//  144 /****************************************************************************
//  145 * ADC读取函数
//  146 ****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  147 int ReadGasData( void )
ReadGasData:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function ReadGasData
        CODE
//  148 {
        ; Saved register size: 0
        ; Auto size: 0
//  149   unsigned int reading = 0;
//  150   
//  151   /* Enable channel */
//  152   ADCCFG |= 0x40;
        ORL     0xf2,#0x40
//  153   
//  154   /* writing to this register starts the extra conversion */
//  155   //ADCCON3 = 0x86;// 0x87;
//  156   ADCCON3 = (0x40 | HAL_ADC_DEC_256 | HAL_ADC_CHANNEL_6);
        MOV     0xb6,#0x66
//  157   
//  158   /* Wait for the conversion to be done */
//  159   while (!(ADCCON1 & 0x80));
??ReadGasData_0:
        MOV     A,0xb4
        MOV     C,0xE0 /* A   */.7
        JNC     ??ReadGasData_0
//  160   
//  161   /* Disable channel after done conversion */
//  162   ADCCFG &= (0x80 ^ 0xFF); //按位异或。如1010^1111=0101（二进制）
        ANL     0xf2,#0x7f
//  163   
//  164   /* Read the result */
//  165   reading = ADCL;
        MOV     A,0xba
//  166   reading |= (int) (ADCH << 8); 
//  167   
//  168   reading >>= 8;
//  169   
//  170   return (reading);
        MOV     A,0xbb
        MOV     R2,A
        CLR     A
        MOV     R3,A
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
        REQUIRE ADCCFG
        REQUIRE ADCCON3
        REQUIRE ADCCON1
        REQUIRE ADCL
        REQUIRE ADCH
//  171 }
//  172 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  173 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  174 { 
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  175   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  176   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  177   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  178   
//  179   MT_UartInit();                  //串口初始化
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  180   MT_UartRegisterTaskID(task_id); //注册串口任务
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  181   P0SEL &= 0x7f;                  //DS18B20的io口初始化 p0.7
        ANL     0xf3,#0x7f
//  182   
//  183   // Device hardware initialization can be added here or in main() (Zmain.c).
//  184   // If the hardware is application specific - add it here.
//  185   // If the hardware is other parts of the device add it in main().
//  186 
//  187  #if defined ( BUILD_ALL_DEVICES )
//  188   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  189   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  190   // together - if they are - we will start up a coordinator. Otherwise,
//  191   // the device will start as a router.
//  192   if ( readCoordinatorJumper() )
//  193     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  194   else
//  195     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  196 #endif // BUILD_ALL_DEVICES
//  197 
//  198 #if defined ( HOLD_AUTO_START )
//  199   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  200   //  from starting the device and wait for the application to
//  201   //  start the device.
//  202   ZDOInitDevice(0);
//  203 #endif
//  204 
//  205   // Setup for the periodic message's destination address
//  206   // Broadcast to everyone
//  207   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  208   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  209   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  210 
//  211   // Setup for the flash command's destination address - Group 1
//  212   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  213   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  214   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  215 
//  216   // Fill out the endpoint description.
//  217   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  218   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  219   SampleApp_epDesc.simpleDesc
//  220             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  221   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  222 
//  223   // Register the endpoint description with the AF
//  224   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  225 
//  226   // Register for all key events - This app will handle all key events
//  227   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  228 
//  229   // By default, all devices start out in Group 1
//  230   SampleApp_Group.ID = 0x0001;
        MOV     DPTR,#SampleApp_Group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  231   osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_Group + 2) & 0xff
        MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  232   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  233 
//  234 #if defined ( LCD_SUPPORTED )
//  235   HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "SampleApp">` & 0xff
        MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  236 #endif
//  237 }
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
        REQUIRE P0SEL
//  238 
//  239 /*********************************************************************
//  240  * @fn      SampleApp_ProcessEvent
//  241  *
//  242  * @brief   Generic Application Task event processor.  This function
//  243  *          is called to process all events for the task.  Events
//  244  *          include timers, messages and any other user defined events.
//  245  *
//  246  * @param   task_id  - The OSAL assigned task ID.
//  247  * @param   events - events to process.  This is a bit map and can
//  248  *                   contain more than one event.
//  249  *
//  250  * @return  none
//  251  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  252 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  253 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_SendPeriodicMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  254   afIncomingMSGPacket_t *MSGpkt;
//  255   (void)task_id;  // Intentionally unreferenced parameter
//  256 
//  257   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//  258   {
//  259     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  260     while ( MSGpkt )
//  261     {
//  262       switch ( MSGpkt->hdr.event )
//  263       {
//  264         // Received when a key is pressed
//  265         case KEY_CHANGE:
//  266           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  267           break;
//  268 
//  269         // Received when a messages is received (OTA) for this endpoint
//  270         case AF_INCOMING_MSG_CMD:
//  271           SampleApp_MessageMSGCB( MSGpkt );
//  272           break;
//  273 
//  274         // Received whenever the device changes state in the network
//  275         case ZDO_STATE_CHANGE:
//  276           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  277           if (  //(SampleApp_NwkState == DEV_ZB_COORD) ||
//  278                  (SampleApp_NwkState == DEV_ROUTER)
//  279               || (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_ProcessEvent_4
//  280           {
//  281             // Start sending the periodic message in a regular interval.
//  282            osal_start_timerEx( SampleApp_TaskID,
//  283                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  284                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  285           }
//  286           else
//  287           {
//  288             // Device is no longer in the network
//  289           }
//  290           break;
//  291 
//  292         default:
//  293           break;
//  294       }
//  295 
//  296       // Release the memory
//  297       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  298 
//  299       // Next - if one is available
//  300       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??SampleApp_ProcessEvent_5
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_6
        ADD     A,#0x5a
        JZ      ??SampleApp_ProcessEvent_7
        ADD     A,#-0x11
        JZ      ??SampleApp_ProcessEvent_2
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_7:
        ; Setup parameters for call to function SampleApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SampleApp_HandleKeys?relay
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??SampleApp_ProcessEvent_4
//  301     }
//  302 
//  303     // return unprocessed events
//  304     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_8:
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_9
//  305   }
//  306 
//  307   // Send a message out - This event is generated by a timer
//  308   //  (setup in SampleApp_Init()).
//  309   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_10
//  310   {
//  311     // Send the periodic message
//  312     SampleApp_SendPeriodicMessage();
        ; Setup parameters for call to function SampleApp_SendPeriodicMessage
        LCALL   ??SampleApp_SendPeriodicMessage?relay
//  313     //SampleApp_Send_P2P_Message();
//  314 
//  315     // Setup to send message again in normal period (+ a little jitter)
//  316     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  317         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0xc
        MOV     R4,A
        CLR     A
        ADDC    A,#0x1
        MOV     R5,A
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  318 
//  319     // return unprocessed events
//  320     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_8
//  321   }
//  322 
//  323   // Discard unknown events
//  324   return 0;
??SampleApp_ProcessEvent_10:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_9:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  325 }
//  326 
//  327 /*********************************************************************
//  328  * Event Generation Functions
//  329  */
//  330 /*********************************************************************
//  331  * @fn      SampleApp_HandleKeys
//  332  *
//  333  * @brief   Handles all key events for this device.
//  334  *
//  335  * @param   shift - true if in shift/alt.
//  336  * @param   keys - bit field for key events. Valid entries:
//  337  *                 HAL_KEY_SW_2
//  338  *                 HAL_KEY_SW_1
//  339  *
//  340  * @return  none
//  341  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  342 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function SampleApp_HandleKeys
        CODE
//  343 {
        FUNCALL SampleApp_HandleKeys, SampleApp_SendFlashMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_FindGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_RemoveGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  344   (void)shift;  // Intentionally unreferenced parameter
//  345   
//  346   if ( keys & HAL_KEY_SW_1 )
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_HandleKeys_0
//  347   {
//  348     /* This key sends the Flash Command is sent to Group 1.
//  349      * This device will not receive the Flash Command from this
//  350      * device (even if it belongs to group 1).
//  351      */
//  352     SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
        ; Setup parameters for call to function SampleApp_SendFlashMessage
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??SampleApp_SendFlashMessage?relay
//  353   }
//  354 
//  355   if ( keys & HAL_KEY_SW_2 )
??SampleApp_HandleKeys_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.1
        JNC     ??SampleApp_HandleKeys_1
//  356   {
//  357     /* The Flashr Command is sent to Group 1.
//  358      * This key toggles this device in and out of group 1.
//  359      * If this device doesn't belong to group 1, this application
//  360      * will not receive the Flash command sent to group 1.
//  361      */
//  362     aps_Group_t *grp;
//  363     grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
//  364     if ( grp )
        ; Setup parameters for call to function aps_FindGroup
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x14
        LCALL   ??aps_FindGroup?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??SampleApp_HandleKeys_2
//  365     {
//  366       // Remove from the group
//  367       aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
        ; Setup parameters for call to function aps_RemoveGroup
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x14
        LCALL   ??aps_RemoveGroup?relay
        SJMP    ??SampleApp_HandleKeys_1
//  368     }
//  369     else
//  370     {
//  371       // Add to the flash group
//  372       aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
??SampleApp_HandleKeys_2:
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  373     }
//  374   }
//  375 }
??SampleApp_HandleKeys_1:
        LJMP    ??Subroutine1_0 & 0xFFFF
        CFI EndBlock cfiBlock3
//  376 
//  377 /*********************************************************************
//  378  * LOCAL FUNCTIONS
//  379  */
//  380 
//  381 /*********************************************************************
//  382  * @fn      SampleApp_MessageMSGCB
//  383  *
//  384  * @brief   Data message processor callback.  This function processes
//  385  *          any incoming data - probably from other devices.  So, based
//  386  *          on cluster ID, perform the intended action.
//  387  *
//  388  * @param   none
//  389  *
//  390  * @return  none
//  391  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  392 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  393 {
        FUNCALL SampleApp_MessageMSGCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, SampleApp_SendPeriodicMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  394   uint16 flashTime;
//  395   byte buf[1];
//  396 
//  397   switch ( pkt->clusterId )
        MOV     A,R2
        ADD     A,#0x21
        MOV     R6,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R7,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for SampleApp_MessageMSGCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_2
        CODE
//  398   {
//  399     case SAMPLEAPP_PERIODIC_CLUSTERID:    //接收到广播信息
//  400       osal_memset(buf, 0 , 1);
??SampleApp_MessageMSGCB_1:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  401       osal_memcpy(buf, pkt->cmd.Data, 1); //复制数据到缓冲区中
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
//  402       if(buf[0]=='w')      //判断收到的数据是否为"w" 
        MOV     ?V0 + 2,#`?<Constant "\\r\\n">` & 0xff
        MOV     ?V0 + 3,#(`?<Constant "\\r\\n">` >> 8) & 0xff
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x77
        JNZ     ??SampleApp_MessageMSGCB_3
//  403       {
//  404         SampleApp_SendPeriodicMessage(); 
        ; Setup parameters for call to function SampleApp_SendPeriodicMessage
        LCALL   ??SampleApp_SendPeriodicMessage?relay
//  405         HalUARTWrite(0, "\r\n", 2);         // 回车换行
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  406         HalUARTWrite(0, "UNUSUAL :", 9);         // 串口提示报警
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "UNUSUAL :">` & 0xff
        MOV     R3,#(`?<Constant "UNUSUAL :">` >> 8) & 0xff
??SampleApp_MessageMSGCB_4:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        SJMP    ??SampleApp_MessageMSGCB_0
//  407       }
//  408       
//  409       else
//  410       {
//  411         HalUARTWrite(0, "TEMP:", 5);       //提示接收到数据
??SampleApp_MessageMSGCB_3:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "TEMP:">` & 0xff
        MOV     R3,#(`?<Constant "TEMP:">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  412         HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength);//输出接收到的数据
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,?V0 + 0
        ADD     A,#0x1f
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  413         HalUARTWrite(0, "\r\n", 2);         // 回车换行
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        SJMP    ??SampleApp_MessageMSGCB_4
//  414       }
//  415       break;
//  416 
//  417     case SAMPLEAPP_FLASH_CLUSTERID:  //接收组播信息
//  418       flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
//  419       HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
??SampleApp_MessageMSGCB_2:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        ; Setup parameters for call to function HalLedBlink
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 1,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R3,#0x32
        MOV     R2,#0x4
        MOV     R1,#0x8
        LCALL   ??HalLedBlink?relay
//  420       break;
//  421   }
//  422 }
??SampleApp_MessageMSGCB_0:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  423 
//  424 /*********************************************************************
//  425  * @fn      SampleApp_SendPeriodicMessage
//  426  *
//  427  * @brief   Send the periodic message.
//  428  *
//  429  * @param   none
//  430  *
//  431  * @return  none
//  432  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  433 void SampleApp_SendPeriodicMessage( void )
SampleApp_SendPeriodicMessage:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function SampleApp_SendPeriodicMessage
        CODE
//  434 {
        FUNCALL SampleApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  435   uchar waring[1] = "w";
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "w">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "w">` & 0xff
        MOV     A,#0x1
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  436   if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  437                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  438                        1,
//  439                        waring,
//  440                        &SampleApp_TransID,
//  441                        AF_DISCV_ROUTE,
//  442                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
        MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  443   {
//  444   }
//  445   else
//  446   {
//  447     // Error occurred in request to send.
//  448   }
//  449   /*uchar waring[1] = "w";
//  450   char str[4];
//  451   char str1[5];
//  452   char strTemp[12];
//  453   char strGas[12];
//  454   uchar TempGas[14];
//  455   float temp;
//  456   uint Gas;
//  457 
//  458   temp = floatReadDs18B20();              //读取温度数据
//  459   Gas  = ReadGasData();                   //模拟值读取函数
//  460   sprintf(str, "%4.1f", temp);
//  461   sprintf(str1, "%-5.2f", (Gas-8)/1.28); //将浮点数转成字符串
//  462   if(Gas>15)
//  463     BEEP_Flag = 1;
//  464   else
//  465     BEEP_Flag = 0;
//  466   if(BEEP_Flag == 1)
//  467   {RLED = !RLED; GLED = 0; BEEP = !BEEP;}
//  468   else
//  469   {RLED = 0; GLED = 1; BEEP = 1;}
//  470   if(TIM_conter == 10)
//  471   {
//  472     BEEP_Flag = 0;
//  473   }*/
//  474   
//  475 /*  if(Gas>15)
//  476   {RLED = !RLED; GLED = 0; BEEP = !BEEP;}
//  477   else
//  478   {RLED = 0; GLED = 1; BEEP = 1;}*/
//  479        
//  480 /*  HalUARTWrite(0, "TEMP:", 5);           //串口输出提示信息
//  481   HalUARTWrite(0, str, 4);
//  482   HalUARTWrite(0, "   ",3);
//  483   HalUARTWrite(0, "GAS:",4);
//  484   HalUARTWrite(0, str1, 4);
//  485   HalUARTWrite(0, "%", 1);
//  486   HalUARTWrite(0, "\r\n",2);*/
//  487 
//  488  /* osal_memcpy(strTemp, "TEMP:", 5);
//  489   osal_memcpy(&strTemp[5], str, 4);
//  490   osal_memcpy(&strTemp[9], " C\0", 3);
//  491   
//  492   osal_memcpy(strGas, "GAS :", 5);
//  493   osal_memcpy(&strGas[5], str1, 5);
//  494   osal_memcpy(&strGas[10], "%\0", 2);
//  495   
//  496   osal_memcpy(&TempGas[0], str, 4);
//  497   osal_memcpy(&TempGas[4], " GAS:",5);
//  498   osal_memcpy(&TempGas[9], str1, 5);
//  499   
//  500   
//  501   
//  502   HalLcdWriteString(strTemp, HAL_LCD_LINE_3);
//  503   HalLcdWriteString(strGas , HAL_LCD_LINE_4);//LCD显示
//  504    
//  505   if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
//  506                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  507                        14,
//  508                        TempGas,
//  509                        &SampleApp_TransID,
//  510                        AF_DISCV_ROUTE,
//  511                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
//  512   {
//  513   }
//  514   else
//  515   {
//  516     // Error occurred in request to send.
//  517   }
//  518   if(Gas>15)
//  519   {
//  520     if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
//  521                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  522                        1,
//  523                        waring,
//  524                        &SampleApp_TransID,
//  525                        AF_DISCV_ROUTE,
//  526                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
//  527    {
//  528    }
//  529   }*/
//  530 }
        MOV     A,#0x1
        CFI EndBlock cfiBlock5
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock6
        REQUIRE ??Subroutine1_0
        ; // Fall through to label ??Subroutine1_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine1_0:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7
//  531 
//  532 /*********************************************************************
//  533  * @fn      SampleApp_SendFlashMessage
//  534  *
//  535  * @brief   Send the flash message to group 1.
//  536  *
//  537  * @param   flashTime - in milliseconds
//  538  *
//  539  * @return  none
//  540  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  541 void SampleApp_SendFlashMessage( uint16 flashTime )
SampleApp_SendFlashMessage:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function SampleApp_SendFlashMessage
        CODE
//  542 {
        FUNCALL SampleApp_SendFlashMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  543   uint8 buffer[3];
//  544   buffer[0] = (uint8)(SampleAppFlashCounter++);
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  545   buffer[1] = LO_UINT16( flashTime );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  546   buffer[2] = HI_UINT16( flashTime );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  547 
//  548   if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
//  549                        SAMPLEAPP_FLASH_CLUSTERID,
//  550                        3,
//  551                        buffer,
//  552                        &SampleApp_TransID,
//  553                        AF_DISCV_ROUTE,
//  554                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Flash_DstAddr & 0xff
        MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  555   {
//  556   }
//  557   else
//  558   {
//  559     // Error occurred in request to send.
//  560   }
//  561 }
        MOV     A,#0x3
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock8

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ReadGasData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ReadGasData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendPeriodicMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendFlashMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendFlashMessage

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SampleApp">`:
        DB "SampleApp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n">`:
        DB "\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "UNUSUAL :">`:
        DB "UNUSUAL :"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TEMP:">`:
        DB "TEMP:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "w">`:
        DB 77H

        END
//  562 
//  563 /*********************************************************************
//  564  * @fn      SampleApp_Send_P2P_Message
//  565  *
//  566  * @brief   point to point.
//  567  *
//  568  * @param   none
//  569  *
//  570  * @return  none
//  571  */
//  572 /*void SampleApp_Send_P2P_Message( void )
//  573 {
//  574   char str[4];
//  575   char str1[5];
//  576   char strTemp[12];
//  577   char strGas[12];
//  578   char TempGas[14];
//  579   float temp;
//  580   int Gas;
//  581 
//  582   temp = floatReadDs18B20();              //读取温度数据
//  583   Gas  = ReadGasData();                   //模拟值读取函数
//  584   sprintf(str, "%4.1f", temp);
//  585   sprintf(str1, "%-5.2f", (Gas-8)/1.28); //将浮点数转成字符串
//  586   
//  587   if(Gas>15)
//  588   {RLED = !RLED; GLED = 0; BEEP = !BEEP;}
//  589   else
//  590   {RLED = 0; GLED = 1; BEEP = 1;}
//  591        
//  592   HalUARTWrite(0, "TEMP:", 5);           //串口输出提示信息
//  593   HalUARTWrite(0, str, 4);
//  594   HalUARTWrite(0, "   ",3);
//  595   HalUARTWrite(0, "GAS:",4);
//  596   HalUARTWrite(0, str1, 4);
//  597   HalUARTWrite(0, "%", 1);
//  598   HalUARTWrite(0, "\r\n",2);
//  599 
//  600   osal_memcpy(strTemp, "TEMP:", 5);
//  601   osal_memcpy(&strTemp[5], str, 4);
//  602   osal_memcpy(&strTemp[9], " C\0", 3);
//  603   
//  604   osal_memcpy(strGas, "GAS :", 5);
//  605   osal_memcpy(&strGas[5], str1, 5);
//  606   osal_memcpy(&strGas[10], "%\0", 2);
//  607   
//  608   osal_memcpy(&TempGas[0], str, 4);
//  609   osal_memcpy(&TempGas[4], " GAS:",5);
//  610   osal_memcpy(&TempGas[9], str1, 5);
//  611   
//  612   
//  613   
//  614   HalLcdWriteString(strTemp, HAL_LCD_LINE_3);
//  615   HalLcdWriteString(strGas , HAL_LCD_LINE_4);//LCD显示
//  616   
//  617    
//  618   if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
//  619                        SAMPLEAPP_P2P_CLUSTERID,
//  620                        14,
//  621                        TempGas,
//  622                        &SampleApp_TransID,
//  623                        AF_DISCV_ROUTE,
//  624                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
//  625   {
//  626   }
//  627   else
//  628   {
//  629     // Error occurred in request to send.
//  630   }
//  631   osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  632                      SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
//  633 }*/
//  634 /*********************************************************************
//  635 *********************************************************************/
//  636 
//  637 
//  638 
//  639 
//  640 
//  641 
//  642 
//  643 
//  644 
//  645 
//  646 
//  647 
// 
// 936 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//   6 bytes in segment SFR_AN
//  54 bytes in segment XDATA_ROM_C
//  67 bytes in segment XDATA_Z
// 
// 978 bytes of CODE  memory
//  54 bytes of CONST memory
//   0 bytes of DATA  memory (+ 6 bytes shared)
//  67 bytes of XDATA memory
//
//Errors: none
//Warnings: none
