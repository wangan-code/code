###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         06/Jan/2021  12:53:17 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\Source\Samp #
#                          leApp.c                                            #
#    Command line       =  -f C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3. #
#                          0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \..\..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ  #
#                          -DROOT=__near_func -DBLINK_LEDS) -f                #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0    #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\Source\Samp #
#                          leApp.c -D ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1  #
#                          -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D     #
#                          LCD_SUPPORTED=DEBUG -lC C:\Users\小安\Desktop\GAS_ #
#                          ED\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\EndDeviceEB-Pro\List\ -lA    #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\En #
#                          dDeviceEB-Pro\List\ --diag_suppress Pe001,Pa010    #
#                          -o C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3. #
#                          0-1.4.0\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \EndDeviceEB-Pro\Obj\ -e --debug --core=plain      #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I C:\Users\小安\Desktop\GAS_ #
#                          ED\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Sampl #
#                          es\SampleApp\CC2530DB\ -I                          #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \SOURCE\ -I C:\Users\小安\Desktop\GAS_ED\ZStack-CC #
#                          2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp #
#                          \CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I              #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\MT\ -I                     #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I            #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I    #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\AF\ -I               #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\NWK\ -I              #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\SEC\ -I              #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\SAPI\ -I             #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\SYS\ -I              #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\STACK\ZDO\ -I              #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\ZMAC\F8W\ -I               #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\ZMAC\ -I                   #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I         #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I            #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I         #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I    #
#                          C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE #
#                          _CHIP\ -Ohz --require_prototypes                   #
#    List file          =  C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\En #
#                          dDeviceEB-Pro\List\SampleApp.lst                   #
#    Object file        =  C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1 #
#                          .4.0\Projects\zstack\Samples\SampleApp\CC2530DB\En #
#                          dDeviceEB-Pro\Obj\SampleApp.r51                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\小安\Desktop\GAS_ED\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          #include <stdio.h>
      2          #include "OSAL.h"
      3          #include "ZGlobals.h"
      4          #include "AF.h"
      5          #include "aps_groups.h"
      6          #include "ZDApp.h"
      7          
      8          #include "SampleApp.h"
      9          #include "SampleAppHw.h"
     10          
     11          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb4
   \   unsigned char volatile __sfr ADCCON1
   \                     ADCCON1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb6
   \   unsigned char volatile __sfr ADCCON3
   \                     ADCCON3:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xba
   \   unsigned char volatile __sfr ADCL
   \                     ADCL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbb
   \   unsigned char volatile __sfr ADCH
   \                     ADCH:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1
     12          
     13          /* HAL */
     14          #include "hal_lcd.h"
     15          #include "hal_led.h"
     16          #include "hal_key.h"
     17          #include "MT_UART.h"
     18          #include "MT_APP.h"
     19          #include "MT.h"
     20          #include "ds18b20.h"
     21          
     22          /*********************************************************************
     23           * MACROS
     24           */
     25          #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
     26          
     27          #define BEEP P1_4
     28          #define GLED P1_5
     29          #define RLED P1_6
     30          
     31          #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
     32          #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
     33          #define HAL_ADC_DEC_256     0x20    /* Decimate by 256 : 12-bit resolution */
     34          #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
     35          #define HAL_ADC_DEC_BITS    0x30    /* Bits [5:4] */
     36          #define HAL_ADC_CHANNEL_6          0x06
     37          
     38          #define uint unsigned int
     39          #define uchar unsigned char
     40          
     41          #define ADC_STOP()  st( ADCCON1 |= 0x30; )
     42          
     43          // Macro for initiating a single sample in single-conversion mode (ADCCON1.STSEL = 11).
     44          #define ADC_SAMPLE_SINGLE()       \
     45            st( ADC_STOP();                 \
     46                ADCCON1 |= 0x40; )
     47          
     48          #define st(x)      do { x } while (__LINE__ == -1)
     49          /*********************************************************************
     50           * CONSTANTS
     51           */
     52          
     53          /*********************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /*********************************************************************
     58           * GLOBAL VARIABLES
     59           */
     60          
     61          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     62          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     63          {
     64            SAMPLEAPP_PERIODIC_CLUSTERID,
     65            SAMPLEAPP_FLASH_CLUSTERID
     66          };
     67          

   \                                 In  segment XDATA_ROM_C, align 1
     68          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
     69          {
     70            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
     71            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
     72            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     73            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     74            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
     75            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     76            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
     77            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
     78            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
     79          };
     80          
     81          // This is the Endpoint/Interface description.  It is defined here, but
     82          // filled-in in SampleApp_Init().  Another way to go would be to fill
     83          // in the structure here and make it a "const" (in code space).  The
     84          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     85          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     86          
     87          /*********************************************************************
     88           * EXTERNAL VARIABLES
     89           */
     90          
     91          /*********************************************************************
     92           * EXTERNAL FUNCTIONS
     93           */
     94          
     95          /*********************************************************************
     96           * LOCAL VARIABLES
     97           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     99                                    // This variable will be received when
    100                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    102          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    104          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          afAddrType_t SampleApp_Periodic_DstAddr; //广播
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          afAddrType_t SampleApp_Flash_DstAddr;    //组播
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          afAddrType_t SampleApp_P2P_DstAddr;      //点播
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    108          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    110          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    111          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    112          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    113          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          uint8 TIM_conter = 0;
   \                     TIM_conter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          byte BEEP_Flag = 0;
   \                     BEEP_Flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    116          
    117          /*********************************************************************
    118           * LOCAL FUNCTIONS
    119           */
    120          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    121          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    122          void SampleApp_SendPeriodicMessage( void );
    123          void SampleApp_SendFlashMessage( uint16 flashTime );
    124          void SampleApp_Send_P2P_Message(void);
    125          uint ReadGasData( void );
    126          void Waring(uint);
    127          void DelayMS(uint msec);
    128          void LCD_P8x16Str(unsigned char x, unsigned char y,unsigned char ch[]);
    129          
    130          
    131          /*********************************************************************
    132           * NETWORK LAYER CALLBACKS
    133           */
    134          
    135          /*********************************************************************
    136           * PUBLIC FUNCTIONS
    137           */
    138          
    139          /*********************************************************************
    140           * @fn      SampleApp_Init
    141           *
    142           * @brief   Initialization function for the Generic App Task.
    143           *          This is called during initialization and should contain
    144           *          any application specific initialization (ie. hardware
    145           *          initialization/setup, table initialization, power up
    146           *          notificaiton ... ).
    147           *
    148           * @param   task_id - the ID assigned by OSAL.  This ID should be
    149           *                    used to send messages and set timers.
    150           *
    151           * @return  none
    152           */
    153          /****************************************************************************
    154          * ADC读取函数
    155          ****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    156          uint ReadGasData( void )
   \                     ReadGasData:
    157          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    158            uint value = 0;
    159            long unsigned int AdcValue = 0;
   \   000005   90....       MOV     DPTR,#__Constant_0
   \   000008   78..         MOV     R0,#?V0 + 4
   \   00000A   12....       LCALL   ?L_MOV_X
    160            
    161            /* Enable channel */
    162            ADCCFG |= 0x40;
   \   00000D   43F240       ORL     0xf2,#0x40
    163            
    164            /* writing to this register starts the extra conversion */
    165            //ADCCON3 = 0x86;// 0x87;
    166            ADCCON3 = 0xB6;
   \   000010   75B6B6       MOV     0xb6,#-0x4a
    167            for(int i=0; i<4; i++)
   \   000013   7C04         MOV     R4,#0x4
    168            {
    169              ADCCON3 = 0xB6;
   \                     ??ReadGasData_0:
   \   000015   75B6B6       MOV     0xb6,#-0x4a
    170              ADC_SAMPLE_SINGLE(); 
   \   000018   43B430       ORL     0xb4,#0x30
   \   00001B   43B440       ORL     0xb4,#0x40
    171              while(!(ADCCON1 & 0x80));              //等待AD转换完成
   \                     ??ReadGasData_1:
   \   00001E   E5B4         MOV     A,0xb4
   \   000020   A2E7         MOV     C,0xE0 /* A   */.7
   \   000022   50FA         JNC     ??ReadGasData_1
    172              /*value =  ADCL >> 2;                  //ADCL寄存器低2位无效
    173              value |= (((uint)ADCH) << 6); */    
    174              value = ADCL>>4;                      
   \   000024   E5BA         MOV     A,0xba
    175              value |= (((uint)ADCH) << 4);         
    176              AdcValue += value;  
   \   000026   C4           SWAP    A
   \   000027   540F         ANL     A,#0xf
   \   000029   FA           MOV     R2,A
   \   00002A   85BB..       MOV     ?V0 + 0,0xbb
   \   00002D   75..00       MOV     ?V0 + 1,#0x0
   \   000030   7404         MOV     A,#0x4
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?S_SHL
   \   000037   EA           MOV     A,R2
   \   000038   45..         ORL     A,?V0 + 0
   \   00003A   F5..         MOV     ?V0 + 0,A
   \   00003C   E4           CLR     A
   \   00003D   F5..         MOV     ?V0 + 2,A
   \   00003F   F5..         MOV     ?V0 + 3,A
   \   000041   78..         MOV     R0,#?V0 + 4
   \   000043   79..         MOV     R1,#?V0 + 0
   \   000045   12....       LCALL   ?L_ADD
    177            }
   \   000048   1C           DEC     R4
   \   000049   EC           MOV     A,R4
   \   00004A   70C9         JNZ     ??ReadGasData_0
    178            AdcValue = AdcValue >> 2;                 //累加除以4，得到平均值
   \   00004C   7402         MOV     A,#0x2
   \   00004E   78..         MOV     R0,#?V0 + 4
   \   000050   12....       LCALL   ?UL_SHR
    179            if(AdcValue > 4090)   // 输入的电压0V时，因为会满量程，检测到AdcValue的12位值为0xfff
   \   000053   90....       MOV     DPTR,#__Constant_ffb
   \   000056   78..         MOV     R0,#?V0 + 4
   \   000058   12....       LCALL   ?UL_GE_X
   \   00005B   5008         JNC     ??ReadGasData_2
    180              AdcValue = 0;
   \   00005D   90....       MOV     DPTR,#__Constant_0
   \   000060   78..         MOV     R0,#?V0 + 4
   \   000062   12....       LCALL   ?L_MOV_X
    181            
    182            
    183            return (AdcValue);
   \                     ??ReadGasData_2:
   \   000065   AA..         MOV     R2,?V0 + 4
   \   000067   AB..         MOV     R3,?V0 + 5
   \   000069   7F08         MOV     R7,#0x8
   \   00006B   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00006E                REQUIRE ADCCFG
   \   00006E                REQUIRE ADCCON3
   \   00006E                REQUIRE ADCCON1
   \   00006E                REQUIRE ADCL
   \   00006E                REQUIRE ADCH
    184          }
    185          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    186          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    187          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    188            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    189            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    190            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    191            
    192            MT_UartInit();                  //串口初始化
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    193            MT_UartRegisterTaskID(task_id); //注册串口任务
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    194            P0SEL &= 0x7f;                  //DS18B20的io口初始化 p0.7
   \   00001E   53F37F       ANL     0xf3,#0x7f
    195            
    196            // Device hardware initialization can be added here or in main() (Zmain.c).
    197            // If the hardware is application specific - add it here.
    198            // If the hardware is other parts of the device add it in main().
    199          
    200           #if defined ( BUILD_ALL_DEVICES )
    201            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    202            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    203            // together - if they are - we will start up a coordinator. Otherwise,
    204            // the device will start as a router.
    205            if ( readCoordinatorJumper() )
    206              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    207            else
    208              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    209          #endif // BUILD_ALL_DEVICES
    210          
    211          #if defined ( HOLD_AUTO_START )
    212            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    213            //  from starting the device and wait for the application to
    214            //  start the device.
    215            ZDOInitDevice(0);
    216          #endif
    217          
    218            // Setup for the periodic message's destination address
    219            // Broadcast to everyone
    220            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000021   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000024   740F         MOV     A,#0xf
   \   000026   F0           MOVX    @DPTR,A
    221            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000027   A3           INC     DPTR
   \   000028   7414         MOV     A,#0x14
   \   00002A   F0           MOVX    @DPTR,A
    222            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00002B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   00002E   74FF         MOV     A,#-0x1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   F0           MOVX    @DPTR,A
    223          
    224            // Setup for the flash command's destination address - Group 1
    225            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000033   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000036   7401         MOV     A,#0x1
   \   000038   F0           MOVX    @DPTR,A
    226            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000039   A3           INC     DPTR
   \   00003A   7414         MOV     A,#0x14
   \   00003C   F0           MOVX    @DPTR,A
    227            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00003D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000040   7401         MOV     A,#0x1
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
    228          
    229            // Fill out the endpoint description.
    230            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000046   90....       MOV     DPTR,#SampleApp_epDesc
   \   000049   7414         MOV     A,#0x14
   \   00004B   F0           MOVX    @DPTR,A
    231            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00004C   A3           INC     DPTR
   \   00004D   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000053   F0           MOVX    @DPTR,A
    232            SampleApp_epDesc.simpleDesc
    233                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000054   A3           INC     DPTR
   \   000055   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00005B   F0           MOVX    @DPTR,A
    234            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   00005C   A3           INC     DPTR
   \   00005D   E4           CLR     A
   \   00005E   F0           MOVX    @DPTR,A
    235          
    236            // Register the endpoint description with the AF
    237            afRegister( &SampleApp_epDesc );
   \   00005F                ; Setup parameters for call to function afRegister
   \   00005F   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000061   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000063   12....       LCALL   ??afRegister?relay
    238          
    239            // Register for all key events - This app will handle all key events
    240            RegisterForKeys( SampleApp_TaskID );
   \   000066                ; Setup parameters for call to function RegisterForKeys
   \   000066   90....       MOV     DPTR,#SampleApp_TaskID
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??RegisterForKeys?relay
    241          
    242            // By default, all devices start out in Group 1
    243            SampleApp_Group.ID = 0x0001;
   \   00006E   90....       MOV     DPTR,#SampleApp_Group
   \   000071   7401         MOV     A,#0x1
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   \   000075   E4           CLR     A
   \   000076   F0           MOVX    @DPTR,A
    244            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   000077                ; Setup parameters for call to function osal_memcpy
   \   000077   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00007A   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   00007D   F5..         MOV     ?V0 + 2,A
   \   00007F   78..         MOV     R0,#?V0 + 0
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000084   7C07         MOV     R4,#0x7
   \   000086   7D00         MOV     R5,#0x0
   \   000088   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00008A   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   00008C   12....       LCALL   ??Subroutine3_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
    245            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   000092                ; Setup parameters for call to function aps_AddGroup
   \   000092   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000094   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000096   7914         MOV     R1,#0x14
   \   000098   12....       LCALL   ??aps_AddGroup?relay
    246          
    247          #if defined ( LCD_SUPPORTED )
    248            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   00009B                ; Setup parameters for call to function HalLcdWriteString
   \   00009B   7901         MOV     R1,#0x1
   \   00009D   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   00009F   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000A1   12....       LCALL   ??HalLcdWriteString?relay
    249          #endif
    250          }
   \   0000A4                REQUIRE ?Subroutine0
   \   0000A4                REQUIRE P0SEL
   \   0000A4                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   12....       LCALL   ??osal_memcpy?relay
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    251          
    252          /*********************************************************************
    253           * @fn      SampleApp_ProcessEvent
    254           *
    255           * @brief   Generic Application Task event processor.  This function
    256           *          is called to process all events for the task.  Events
    257           *          include timers, messages and any other user defined events.
    258           *
    259           * @param   task_id  - The OSAL assigned task ID.
    260           * @param   events - events to process.  This is a bit map and can
    261           *                   contain more than one event.
    262           *
    263           * @return  none
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    266          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    267            afIncomingMSGPacket_t *MSGpkt;
    268            (void)task_id;  // Intentionally unreferenced parameter
    269          
    270            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    271            {
    272              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    273              while ( MSGpkt )
    274              {
    275                switch ( MSGpkt->hdr.event )
    276                {
    277                  // Received when a key is pressed
    278                  case KEY_CHANGE:
    279                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    280                    break;
    281          
    282                  // Received when a messages is received (OTA) for this endpoint
    283                  case AF_INCOMING_MSG_CMD:
    284                    SampleApp_MessageMSGCB( MSGpkt );
    285                    break;
    286          
    287                  // Received whenever the device changes state in the network
    288                  case ZDO_STATE_CHANGE:
    289                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    290                    if (  //(SampleApp_NwkState == DEV_ZB_COORD) ||
    291                           (SampleApp_NwkState == DEV_ROUTER)
    292                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    293                    {
    294                      // Start sending the periodic message in a regular interval.
    295                      osal_start_timerEx( SampleApp_TaskID,
    296                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    297                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CE8         MOV     R4,#-0x18
   \   000020   7D03         MOV     R5,#0x3
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    298                    }
    299                    else
    300                    {
    301                      // Device is no longer in the network
    302                    }
    303                    break;
    304          
    305                  default:
    306                    break;
    307                }
    308          
    309                // Release the memory
    310                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    311          
    312                // Next - if one is available
    313                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    314              }
    315          
    316              // return unprocessed events
    317              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    318            }
    319          
    320            // Send a message out - This event is generated by a timer
    321            //  (setup in SampleApp_Init()).
    322            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    323            {
    324              // Send the periodic message
    325              SampleApp_SendPeriodicMessage();
   \   000086                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000086   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
    326              //SampleApp_Send_P2P_Message();
    327          
    328              // Setup to send message again in normal period (+ a little jitter)
    329              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    330                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24E8         ADD     A,#-0x18
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3403         ADDC    A,#0x3
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    331          
    332              // return unprocessed events
    333              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    334            }
    335          
    336            // Discard unknown events
    337            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    338          }
    339          
    340          /*********************************************************************
    341           * Event Generation Functions
    342           */
    343          /*********************************************************************
    344           * @fn      SampleApp_HandleKeys
    345           *
    346           * @brief   Handles all key events for this device.
    347           *
    348           * @param   shift - true if in shift/alt.
    349           * @param   keys - bit field for key events. Valid entries:
    350           *                 HAL_KEY_SW_2
    351           *                 HAL_KEY_SW_1
    352           *
    353           * @return  none
    354           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    355          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    356          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    357            (void)shift;  // Intentionally unreferenced parameter
    358            
    359            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    360            {
    361              /* This key sends the Flash Command is sent to Group 1.
    362               * This device will not receive the Flash Command from this
    363               * device (even if it belongs to group 1).
    364               */
    365              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    366            }
    367          
    368            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    369            {
    370              /* The Flashr Command is sent to Group 1.
    371               * This key toggles this device in and out of group 1.
    372               * If this device doesn't belong to group 1, this application
    373               * will not receive the Flash command sent to group 1.
    374               */
    375              aps_Group_t *grp;
    376              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    377              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    378              {
    379                // Remove from the group
    380                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    381              }
    382              else
    383              {
    384                // Add to the flash group
    385                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    386              }
    387            }
    388          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B                REQUIRE ?Subroutine1
   \   00003B                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    389          
    390          /*********************************************************************
    391           * LOCAL FUNCTIONS
    392           */
    393          
    394          /*********************************************************************
    395           * @fn      SampleApp_MessageMSGCB
    396           *
    397           * @brief   Data message processor callback.  This function processes
    398           *          any incoming data - probably from other devices.  So, based
    399           *          on cluster ID, perform the intended action.
    400           *
    401           * @param   none
    402           *
    403           * @return  none
    404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    405          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    406          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    407            uint16 flashTime;
    408            byte buf[2];
    409          
    410            switch ( pkt->clusterId )
   \   00000A   EA           MOV     A,R2
   \   00000B   2421         ADD     A,#0x21
   \   00000D   F8           MOV     R0,A
   \   00000E   EB           MOV     A,R3
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   FE           MOV     R6,A
   \   000014   E9           MOV     A,R1
   \   000015   FF           MOV     R7,A
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 1,A
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00002A   0100         DW        1
   \   00002C   01           DB        1
   \   00002D   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00002F   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000031   ....         DW        ??SampleApp_MessageMSGCB_2
    411            {  
    412              case SAMPLEAPP_PERIODIC_CLUSTERID:
    413                
    414                osal_memset(buf, 0 , 2);
   \                     ??SampleApp_MessageMSGCB_1:
   \   000033                ; Setup parameters for call to function osal_memset
   \   000033   7C02         MOV     R4,#0x2
   \   000035   7D00         MOV     R5,#0x0
   \   000037   7900         MOV     R1,#0x0
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   AA82         MOV     R2,DPL
   \   000041   AB83         MOV     R3,DPH
   \   000043   12....       LCALL   ??osal_memset?relay
    415                osal_memcpy(buf, pkt->cmd.Data, 1); //复制数据到缓冲区中
   \   000046                ; Setup parameters for call to function osal_memcpy
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F5..         MOV     ?V0 + 0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V0 + 1,A
   \   000051   75..00       MOV     ?V0 + 2,#0x0
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   7C01         MOV     R4,#0x1
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   7403         MOV     A,#0x3
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000065   12....       LCALL   ?DEALLOC_XSTACK8
    416             
    417                if(buf[0]=='w')      //判断收到的数据是否为"w" 
   \   000068   85..82       MOV     DPL,?XSP + 0
   \   00006B   85..83       MOV     DPH,?XSP + 1
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   6477         XRL     A,#0x77
   \   000071   704A         JNZ     ??SampleApp_MessageMSGCB_0
    418                {BEEP_Flag = 1; HalUARTWrite(0, "UNUSUAL", 5);}    //报警标志置1，提示接收成功
   \   000073   90....       MOV     DPTR,#BEEP_Flag
   \   000076   7401         MOV     A,#0x1
   \   000078   F0           MOVX    @DPTR,A
   \   000079                ; Setup parameters for call to function HalUARTWrite
   \   000079   7C05         MOV     R4,#0x5
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   7A..         MOV     R2,#`?<Constant "UNUSUAL">` & 0xff
   \   00007F   7B..         MOV     R3,#(`?<Constant "UNUSUAL">` >> 8) & 0xff
   \   000081   7900         MOV     R1,#0x0
   \   000083   12....       LCALL   ??HalUARTWrite?relay
   \   000086   8035         SJMP    ??SampleApp_MessageMSGCB_0
    419                /*HalUARTWrite(0, "TEMP:", 5);       //提示接收到数据
    420                HalUARTWrite(0, pkt->cmd.Data, pkt->cmd.DataLength);//输出接收到的数据
    421                HalUARTWrite(0, "%", 1);
    422                HalUARTWrite(0, "\r\n", 2);         // 回车换行*/
    423                break;
    424          
    425              case SAMPLEAPP_FLASH_CLUSTERID:
    426                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    427                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_2:
   \   000088   8E82         MOV     DPL,R6
   \   00008A   8F83         MOV     DPH,R7
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F8           MOV     R0,A
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F9           MOV     R1,A
   \   000091                ; Setup parameters for call to function HalLedBlink
   \   000091   8882         MOV     DPL,R0
   \   000093   8983         MOV     DPH,R1
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   FA           MOV     R2,A
   \   000098   8882         MOV     DPL,R0
   \   00009A   8983         MOV     DPH,R1
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   F9           MOV     R1,A
   \   0000A0   EA           MOV     A,R2
   \   0000A1   2400         ADD     A,#0x0
   \   0000A3   F5..         MOV     ?V0 + 0,A
   \   0000A5   E4           CLR     A
   \   0000A6   39           ADDC    A,R1
   \   0000A7   F5..         MOV     ?V0 + 1,A
   \   0000A9   7402         MOV     A,#0x2
   \   0000AB   78..         MOV     R0,#?V0 + 0
   \   0000AD   12....       LCALL   ?US_SHR
   \   0000B0   AC..         MOV     R4,?V0 + 0
   \   0000B2   AD..         MOV     R5,?V0 + 1
   \   0000B4   7B32         MOV     R3,#0x32
   \   0000B6   7A04         MOV     R2,#0x4
   \   0000B8   7908         MOV     R1,#0x8
   \   0000BA   12....       LCALL   ??HalLedBlink?relay
    428                break;
    429            }
    430          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000BD   7402         MOV     A,#0x2
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C2   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   AA82         MOV     R2,DPL
   \   000002   AB83         MOV     R3,DPH
   \   000004                REQUIRE ??Subroutine3_0
   \   000004                ; // Fall through to label ??Subroutine3_0
    431          
    432          /*********************************************************************
    433           * @fn      SampleApp_SendPeriodicMessage
    434           *
    435           * @brief   Send the periodic message.
    436           *
    437           * @param   none
    438           *
    439           * @return  none
    440           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    441          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    442          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 60
   \   000005   74C4         MOV     A,#-0x3c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    443            uchar waring[1] = "w";
   \   00000A   90....       MOV     DPTR,#`?<Constant "w">`
   \   00000D   C082         PUSH    DPL
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   7583..       MOV     DPH,#(`?<Constant "w">` >> 8) & 0xff
   \   00001C   D082         POP     DPL
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    444            char str[4];
    445            char str1[5];
    446            char strTemp[12];
    447            char strGas[12];
    448            uchar TempGas[21];
    449            uchar EN_ID[5];
    450            
    451            float temp;
    452            uint Gas;
    453          
    454            temp = floatReadDs18B20();              //读取温度数据
   \   000023                ; Setup parameters for call to function floatReadDs18B20
   \   000023   12....       LCALL   ??floatReadDs18B20?relay
   \   000026   8A..         MOV     ?V0 + 4,R2
   \   000028   8B..         MOV     ?V0 + 5,R3
   \   00002A   8C..         MOV     ?V0 + 6,R4
   \   00002C   8D..         MOV     ?V0 + 7,R5
    455            Gas  = ReadGasData();                   //模拟值读取函数
   \   00002E                ; Setup parameters for call to function ReadGasData
   \   00002E   12....       LCALL   ??ReadGasData?relay
   \   000031   8A..         MOV     ?V0 + 0,R2
   \   000033   8B..         MOV     ?V0 + 1,R3
   \   000035   AE..         MOV     R6,?V0 + 0
   \   000037   AF..         MOV     R7,?V0 + 1
    456            
    457            if(Gas<200) Gas = 200;
   \   000039   C3           CLR     C
   \   00003A   EE           MOV     A,R6
   \   00003B   94C8         SUBB    A,#-0x38
   \   00003D   EF           MOV     A,R7
   \   00003E   9400         SUBB    A,#0x0
   \   000040   5006         JNC     ??SampleApp_SendPeriodicMessage_0
   \   000042   7EC8         MOV     R6,#-0x38
   \   000044   7F00         MOV     R7,#0x0
   \   000046   8054         SJMP    ??SampleApp_SendPeriodicMessage_1
    458            //if(Gas>300) BEEP_Flag = 1;
    459            if(Gas > 300)                                            //发送报警标志
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   000048   C3           CLR     C
   \   000049   EE           MOV     A,R6
   \   00004A   942D         SUBB    A,#0x2d
   \   00004C   EF           MOV     A,R7
   \   00004D   9401         SUBB    A,#0x1
   \   00004F   404B         JC      ??SampleApp_SendPeriodicMessage_1
    460            {
    461              if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    462                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    463                                 1,
    464                                 waring,
    465                                 &SampleApp_TransID,
    466                                 AF_DISCV_ROUTE,
    467                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000051                ; Setup parameters for call to function AF_DataRequest
   \   000051   75..1E       MOV     ?V0 + 0,#0x1e
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000059   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00005C   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00005F   78..         MOV     R0,#?V0 + 0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   7403         MOV     A,#0x3
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   8582..       MOV     ?V0 + 0,DPL
   \   00006C   8583..       MOV     ?V0 + 1,DPH
   \   00006F   78..         MOV     R0,#?V0 + 0
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000074   75..01       MOV     ?V0 + 0,#0x1
   \   000077   75..00       MOV     ?V0 + 1,#0x0
   \   00007A   78..         MOV     R0,#?V0 + 0
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007F   78..         MOV     R0,#?V0 + 0
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000084   7920         MOV     R1,#0x20
   \   000086   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000088   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00008A   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00008C   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00008E   12....       LCALL   ??AF_DataRequest?relay
   \   000091   7409         MOV     A,#0x9
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
    468             {
    469                BEEP_Flag = 1;
   \   000096   90....       MOV     DPTR,#BEEP_Flag
   \   000099   7401         MOV     A,#0x1
   \   00009B   F0           MOVX    @DPTR,A
    470             }
    471             else  BEEP_Flag = 1;;
    472            }
    473            
    474            sprintf(str, "%2.1f", temp);
   \                     ??SampleApp_SendPeriodicMessage_1:
   \   00009C                ; Setup parameters for call to function sprintf
   \   00009C   78..         MOV     R0,#?V0 + 4
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000A1   7C..         MOV     R4,#`?<Constant "%2.1f">` & 0xff
   \   0000A3   7D..         MOV     R5,#(`?<Constant "%2.1f">` >> 8) & 0xff
   \   0000A5   740A         MOV     A,#0xa
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   AA82         MOV     R2,DPL
   \   0000AC   AB83         MOV     R3,DPH
   \   0000AE   12....       LCALL   ??sprintf?relay
   \   0000B1   7404         MOV     A,#0x4
   \   0000B3   12....       LCALL   ?DEALLOC_XSTACK8
    475            sprintf(str1, "%-5.2f", (Gas-200)/20.47);  //将浮点数转成字符串
   \   0000B6                ; Setup parameters for call to function sprintf
   \   0000B6   EE           MOV     A,R6
   \   0000B7   2438         ADD     A,#0x38
   \   0000B9   F5..         MOV     ?V0 + 0,A
   \   0000BB   EF           MOV     A,R7
   \   0000BC   34FF         ADDC    A,#-0x1
   \   0000BE   F5..         MOV     ?V0 + 1,A
   \   0000C0   E4           CLR     A
   \   0000C1   F5..         MOV     ?V0 + 2,A
   \   0000C3   F5..         MOV     ?V0 + 3,A
   \   0000C5   78..         MOV     R0,#?V0 + 0
   \   0000C7   12....       LCALL   ?UL_TO_FLT
   \   0000CA   90....       MOV     DPTR,#__Constant_41a3c28f
   \   0000CD   78..         MOV     R0,#?V0 + 4
   \   0000CF   12....       LCALL   ?L_MOV_X
   \   0000D2   78..         MOV     R0,#?V0 + 0
   \   0000D4   79..         MOV     R1,#?V0 + 4
   \   0000D6   12....       LCALL   ?FLT_DIV
   \   0000D9   78..         MOV     R0,#?V0 + 0
   \   0000DB   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000DE   7C..         MOV     R4,#`?<Constant "%-5.2f">` & 0xff
   \   0000E0   7D..         MOV     R5,#(`?<Constant "%-5.2f">` >> 8) & 0xff
   \   0000E2   740E         MOV     A,#0xe
   \   0000E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E7   AA82         MOV     R2,DPL
   \   0000E9   AB83         MOV     R3,DPH
   \   0000EB   12....       LCALL   ??sprintf?relay
   \   0000EE   7404         MOV     A,#0x4
   \   0000F0   12....       LCALL   ?DEALLOC_XSTACK8
    476            
    477            sprintf(EN_ID, "%x", NLME_GetShortAddr());
                           ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   0000F3                ; Setup parameters for call to function sprintf
   \   0000F3                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000F3   12....       LCALL   ??NLME_GetShortAddr?relay
   \   0000F6   8A..         MOV     ?V0 + 0,R2
   \   0000F8   8B..         MOV     ?V0 + 1,R3
   \   0000FA   78..         MOV     R0,#?V0 + 0
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FF   7C..         MOV     R4,#`?<Constant "%x">` & 0xff
   \   000101   7D..         MOV     R5,#(`?<Constant "%x">` >> 8) & 0xff
   \   000103   7403         MOV     A,#0x3
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   AA82         MOV     R2,DPL
   \   00010A   AB83         MOV     R3,DPH
   \   00010C   12....       LCALL   ??sprintf?relay
   \   00010F   7402         MOV     A,#0x2
   \   000111   12....       LCALL   ?DEALLOC_XSTACK8
    478          /*  EN_ID[0] = NLME_GetShortAddr()/16/16/16 + '0';
    479            EN_ID[1] = NLME_GetShortAddr()/16/16%16 + '0';
    480            EN_ID[2] = NLME_GetShortAddr()/16%16 + '0';
    481            EN_ID[3] = NLME_GetShortAddr()%16 + '0';*/
    482            EN_ID[4] = '\0';
   \   000114   7405         MOV     A,#0x5
   \   000116   12....       LCALL   ?XSTACK_DISP0_8
   \   000119   E4           CLR     A
   \   00011A   F0           MOVX    @DPTR,A
    483          
    484            
    485            if(BEEP_Flag == 1)                         //判断标志位
   \   00011B   90....       MOV     DPTR,#BEEP_Flag
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   6401         XRL     A,#0x1
   \   000121   7016         JNZ     ??SampleApp_SendPeriodicMessage_2
    486            {RLED = !RLED; GLED = 0; BEEP = !BEEP;}
   \   000123   D2F0         SETB    B.0
   \   000125   A296         MOV     C,0x90.6
   \   000127   30F001       JNB     B.0,??SampleApp_SendPeriodicMessage_3
   \   00012A   B3           CPL     C
   \                     ??SampleApp_SendPeriodicMessage_3:
   \   00012B   9296         MOV     0x90.6,C
   \   00012D   C295         CLR     0x90.5
   \   00012F   A294         MOV     C,0x90.4
   \   000131   30F001       JNB     B.0,??SampleApp_SendPeriodicMessage_4
   \   000134   B3           CPL     C
   \                     ??SampleApp_SendPeriodicMessage_4:
   \   000135   9294         MOV     0x90.4,C
   \   000137   8006         SJMP    ??SampleApp_SendPeriodicMessage_5
    487            else
    488            {RLED = 0; GLED = 1; BEEP = 1;}
   \                     ??SampleApp_SendPeriodicMessage_2:
   \   000139   C296         CLR     0x90.6
   \   00013B   D295         SETB    0x90.5
   \   00013D   D294         SETB    0x90.4
    489            
    490            
    491            if(TIM_conter == 10)                   //5秒未接收则解除报警
   \                     ??SampleApp_SendPeriodicMessage_5:
   \   00013F   90....       MOV     DPTR,#TIM_conter
   \   000142   E0           MOVX    A,@DPTR
   \   000143   640A         XRL     A,#0xa
   \   000145   7009         JNZ     ??SampleApp_SendPeriodicMessage_6
    492            {
    493              BEEP_Flag = 0;
   \   000147   90....       MOV     DPTR,#BEEP_Flag
   \   00014A   E4           CLR     A
   \   00014B   F0           MOVX    @DPTR,A
    494              TIM_conter = 0;
   \   00014C   90....       MOV     DPTR,#TIM_conter
   \   00014F   F0           MOVX    @DPTR,A
    495            }
    496            TIM_conter++;
   \                     ??SampleApp_SendPeriodicMessage_6:
   \   000150   E0           MOVX    A,@DPTR
   \   000151   04           INC     A
   \   000152   F0           MOVX    @DPTR,A
    497            
    498          /*  if(Gas>15)
    499            {RLED = !RLED; GLED = 0; BEEP = !BEEP;}
    500            else
    501            {RLED = 0; GLED = 1; BEEP = 1;}*/
    502                 
    503          /*  HalUARTWrite(0, "TEMP:", 5);           //串口输出提示信息
    504            HalUARTWrite(0, str, 4);
    505            HalUARTWrite(0, "   ",3);
    506            HalUARTWrite(0, "GAS:",4);
    507            HalUARTWrite(0, str1, 4);
    508            HalUARTWrite(0, "%", 1);
    509            HalUARTWrite(0, "\r\n",2);*/
    510            
    511            HalUARTWrite(0, EN_ID,5);
   \   000153                ; Setup parameters for call to function HalUARTWrite
   \   000153   7C05         MOV     R4,#0x5
   \   000155   7D00         MOV     R5,#0x0
   \   000157   7401         MOV     A,#0x1
   \   000159   12....       LCALL   ?XSTACK_DISP0_8
   \   00015C   AA82         MOV     R2,DPL
   \   00015E   AB83         MOV     R3,DPH
   \   000160   7900         MOV     R1,#0x0
   \   000162   12....       LCALL   ??HalUARTWrite?relay
    512            
    513          
    514            osal_memcpy(strTemp, "TEMP:", 5);
   \   000165                ; Setup parameters for call to function osal_memcpy
   \   000165   75....       MOV     ?V0 + 0,#`?<Constant "TEMP:">` & 0xff
   \   000168   75....       MOV     ?V0 + 1,#(`?<Constant "TEMP:">` >> 8) & 0xff
   \   00016B   75..00       MOV     ?V0 + 2,#0x0
   \   00016E   78..         MOV     R0,#?V0 + 0
   \   000170   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000173   7C05         MOV     R4,#0x5
   \   000175   7D00         MOV     R5,#0x0
   \   000177   7433         MOV     A,#0x33
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00017F   12....       LCALL   ?DEALLOC_XSTACK8
    515            osal_memcpy(&strTemp[5], str, 4);
   \   000182   7406         MOV     A,#0x6
   \   000184   12....       LCALL   ?XSTACK_DISP0_8
   \   000187   A982         MOV     R1,DPL
   \   000189   AA83         MOV     R2,DPH
   \   00018B   89..         MOV     ?V0 + 0,R1
   \   00018D   8A..         MOV     ?V0 + 1,R2
   \   00018F                ; Setup parameters for call to function osal_memcpy
   \   00018F   78..         MOV     R0,#?V0 + 0
   \   000191   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000194   7C04         MOV     R4,#0x4
   \   000196   7D00         MOV     R5,#0x0
   \   000198   7438         MOV     A,#0x38
   \   00019A   12....       LCALL   ?XSTACK_DISP0_8
   \   00019D   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0001A0   12....       LCALL   ?DEALLOC_XSTACK8
    516            osal_memcpy(&strTemp[9], " C\0", 3);
   \   0001A3                ; Setup parameters for call to function osal_memcpy
   \   0001A3   75....       MOV     ?V0 + 4,#`?<Constant " C\\000">` & 0xff
   \   0001A6   75....       MOV     ?V0 + 5,#(`?<Constant " C\\000">` >> 8) & 0xff
   \   0001A9   75..00       MOV     ?V0 + 6,#0x0
   \   0001AC   78..         MOV     R0,#?V0 + 4
   \   0001AE   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001B1   7C03         MOV     R4,#0x3
   \   0001B3   7D00         MOV     R5,#0x0
   \   0001B5   743C         MOV     A,#0x3c
   \   0001B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BA   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0001BD   12....       LCALL   ?DEALLOC_XSTACK8
    517            
    518            osal_memcpy(strGas, "GAS :", 5);
   \   0001C0                ; Setup parameters for call to function osal_memcpy
   \   0001C0   75....       MOV     ?V0 + 4,#`?<Constant "GAS :">` & 0xff
   \   0001C3   75....       MOV     ?V0 + 5,#(`?<Constant "GAS :">` >> 8) & 0xff
   \   0001C6   78..         MOV     R0,#?V0 + 4
   \   0001C8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001CB   7C05         MOV     R4,#0x5
   \   0001CD   7D00         MOV     R5,#0x0
   \   0001CF   7427         MOV     A,#0x27
   \   0001D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D4   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0001D7   12....       LCALL   ?DEALLOC_XSTACK8
    519            osal_memcpy(&strGas[5], str1, 5);
   \   0001DA   740A         MOV     A,#0xa
   \   0001DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DF   A982         MOV     R1,DPL
   \   0001E1   AA83         MOV     R2,DPH
   \   0001E3   89..         MOV     ?V0 + 4,R1
   \   0001E5   8A..         MOV     ?V0 + 5,R2
   \   0001E7                ; Setup parameters for call to function osal_memcpy
   \   0001E7   78..         MOV     R0,#?V0 + 4
   \   0001E9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001EC   7C05         MOV     R4,#0x5
   \   0001EE   7D00         MOV     R5,#0x0
   \   0001F0   742C         MOV     A,#0x2c
   \   0001F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F5   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0001F8   12....       LCALL   ?DEALLOC_XSTACK8
    520            osal_memcpy(&strGas[10], "%\0", 2);
   \   0001FB                ; Setup parameters for call to function osal_memcpy
   \   0001FB   75....       MOV     ?V0 + 8,#`?<Constant "%\\000">` & 0xff
   \   0001FE   75....       MOV     ?V0 + 9,#(`?<Constant "%\\000">` >> 8) & 0xff
   \   000201   75..00       MOV     ?V0 + 10,#0x0
   \   000204   78..         MOV     R0,#?V0 + 8
   \   000206   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000209   7C02         MOV     R4,#0x2
   \   00020B   7D00         MOV     R5,#0x0
   \   00020D   7431         MOV     A,#0x31
   \   00020F   12....       LCALL   ?XSTACK_DISP0_8
   \   000212   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000215   12....       LCALL   ?DEALLOC_XSTACK8
    521            
    522            osal_memcpy(&TempGas[0], str, 4);
   \   000218                ; Setup parameters for call to function osal_memcpy
   \   000218   78..         MOV     R0,#?V0 + 0
   \   00021A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00021D   7C04         MOV     R4,#0x4
   \   00021F   7D00         MOV     R5,#0x0
   \   000221   7412         MOV     A,#0x12
   \   000223   12....       LCALL   ?XSTACK_DISP0_8
   \   000226   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000229   12....       LCALL   ?DEALLOC_XSTACK8
    523            osal_memcpy(&TempGas[4], " GAS:",5);
   \   00022C                ; Setup parameters for call to function osal_memcpy
   \   00022C   75....       MOV     ?V0 + 0,#`?<Constant " GAS:">` & 0xff
   \   00022F   75....       MOV     ?V0 + 1,#(`?<Constant " GAS:">` >> 8) & 0xff
   \   000232   78..         MOV     R0,#?V0 + 0
   \   000234   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000237   7C05         MOV     R4,#0x5
   \   000239   7D00         MOV     R5,#0x0
   \   00023B   7416         MOV     A,#0x16
   \   00023D   12....       LCALL   ?XSTACK_DISP0_8
   \   000240   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000243   12....       LCALL   ?DEALLOC_XSTACK8
    524            osal_memcpy(&TempGas[9], str1, 5);
   \   000246                ; Setup parameters for call to function osal_memcpy
   \   000246   78..         MOV     R0,#?V0 + 4
   \   000248   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00024B   7C05         MOV     R4,#0x5
   \   00024D   7D00         MOV     R5,#0x0
   \   00024F   741B         MOV     A,#0x1b
   \   000251   12....       LCALL   ?XSTACK_DISP0_8
   \   000254   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000257   12....       LCALL   ?DEALLOC_XSTACK8
    525            osal_memcpy(&TempGas[14], "%", 1);
   \   00025A                ; Setup parameters for call to function osal_memcpy
   \   00025A   75....       MOV     ?V0 + 0,#`?<Constant "%">` & 0xff
   \   00025D   75....       MOV     ?V0 + 1,#(`?<Constant "%">` >> 8) & 0xff
   \   000260   78..         MOV     R0,#?V0 + 0
   \   000262   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000265   7C01         MOV     R4,#0x1
   \   000267   7D00         MOV     R5,#0x0
   \   000269   7420         MOV     A,#0x20
   \   00026B   12....       LCALL   ?XSTACK_DISP0_8
   \   00026E   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000271   12....       LCALL   ?DEALLOC_XSTACK8
    526            osal_memcpy(&TempGas[15], " ", 1);
   \   000274                ; Setup parameters for call to function osal_memcpy
   \   000274   75....       MOV     ?V0 + 0,#`?<Constant " ">` & 0xff
   \   000277   75....       MOV     ?V0 + 1,#(`?<Constant " ">` >> 8) & 0xff
   \   00027A   78..         MOV     R0,#?V0 + 0
   \   00027C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00027F   7C01         MOV     R4,#0x1
   \   000281   7D00         MOV     R5,#0x0
   \   000283   7421         MOV     A,#0x21
   \   000285   12....       LCALL   ?XSTACK_DISP0_8
   \   000288   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00028B   12....       LCALL   ?DEALLOC_XSTACK8
    527            osal_memcpy(&TempGas[16], EN_ID, 4);
   \   00028E                ; Setup parameters for call to function osal_memcpy
   \   00028E   7401         MOV     A,#0x1
   \   000290   12....       LCALL   ?XSTACK_DISP0_8
   \   000293   A982         MOV     R1,DPL
   \   000295   AA83         MOV     R2,DPH
   \   000297   89..         MOV     ?V0 + 0,R1
   \   000299   8A..         MOV     ?V0 + 1,R2
   \   00029B   78..         MOV     R0,#?V0 + 0
   \   00029D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002A0   7C04         MOV     R4,#0x4
   \   0002A2   7D00         MOV     R5,#0x0
   \   0002A4   7422         MOV     A,#0x22
   \   0002A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A9   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0002AC   12....       LCALL   ?DEALLOC_XSTACK8
    528            
    529            
    530            
    531            HalLcdWriteString(strTemp, HAL_LCD_LINE_3);
   \   0002AF                ; Setup parameters for call to function HalLcdWriteString
   \   0002AF   7903         MOV     R1,#0x3
   \   0002B1   7430         MOV     A,#0x30
   \   0002B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B6   AA82         MOV     R2,DPL
   \   0002B8   AB83         MOV     R3,DPH
   \   0002BA   12....       LCALL   ??HalLcdWriteString?relay
    532            HalLcdWriteString(strGas , HAL_LCD_LINE_4);//LCD显示
   \   0002BD                ; Setup parameters for call to function HalLcdWriteString
   \   0002BD   7904         MOV     R1,#0x4
   \   0002BF   7424         MOV     A,#0x24
   \   0002C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C4   AA82         MOV     R2,DPL
   \   0002C6   AB83         MOV     R3,DPH
   \   0002C8   12....       LCALL   ??HalLcdWriteString?relay
    533             
    534            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    535                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    536                                 20,
    537                                 TempGas,
    538                                 &SampleApp_TransID,
    539                                 AF_DISCV_ROUTE,
    540                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   0002CB                ; Setup parameters for call to function AF_DataRequest
   \   0002CB   75..1E       MOV     ?V0 + 0,#0x1e
   \   0002CE   78..         MOV     R0,#?V0 + 0
   \   0002D0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002D3   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0002D6   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0002D9   78..         MOV     R0,#?V0 + 0
   \   0002DB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002DE   7412         MOV     A,#0x12
   \   0002E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E3   8582..       MOV     ?V0 + 0,DPL
   \   0002E6   8583..       MOV     ?V0 + 1,DPH
   \   0002E9   78..         MOV     R0,#?V0 + 0
   \   0002EB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002EE   75..14       MOV     ?V0 + 0,#0x14
   \   0002F1   75..00       MOV     ?V0 + 1,#0x0
   \   0002F4   78..         MOV     R0,#?V0 + 0
   \   0002F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002F9   75..01       MOV     ?V0 + 0,#0x1
   \   0002FC   78..         MOV     R0,#?V0 + 0
   \   0002FE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000301   7920         MOV     R1,#0x20
   \   000303   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000305   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000307   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000309   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00030B   12....       LCALL   ??AF_DataRequest?relay
   \   00030E   7409         MOV     A,#0x9
   \   000310   12....       LCALL   ?DEALLOC_XSTACK8
    541            {
    542            }
    543            else
    544            {
    545              // Error occurred in request to send.
    546            }
    547            /*if(Gas > 300)                                            //发送报警标志
    548            {
    549              if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    550                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    551                                 1,
    552                                 waring,
    553                                 &SampleApp_TransID,
    554                                 AF_DISCV_ROUTE,
    555                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    556             {
    557             }
    558            }*/
    559          }
   \   000313   743C         MOV     A,#0x3c
   \   000315   12....       LCALL   ?DEALLOC_XSTACK8
   \   000318   7F0B         MOV     R7,#0xb
   \   00031A   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00031D                REQUIRE _A_P1
    560          
    561          /*********************************************************************
    562           * @fn      SampleApp_SendFlashMessage
    563           *
    564           * @brief   Send the flash message to group 1.
    565           *
    566           * @param   flashTime - in milliseconds
    567           *
    568           * @return  none
    569           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    570          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    571          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    572            uint8 buffer[3];
    573            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    574            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    575            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    576          
    577            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    578                                 SAMPLEAPP_FLASH_CLUSTERID,
    579                                 3,
    580                                 buffer,
    581                                 &SampleApp_TransID,
    582                                 AF_DISCV_ROUTE,
    583                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    584            {
    585            }
    586            else
    587            {
    588              // Error occurred in request to send.
    589            }
    590          }
   \   000071   7403         MOV     A,#0x3
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReadGasData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReadGasData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UNUSUAL">`:
   \   000000   554E5553     DB "UNUSUAL"
   \            55414C00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "w">`:
   \   000000   77           DB 77H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%2.1f">`:
   \   000000   25322E31     DB "%2.1f"
   \            6600    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%-5.2f">`:
   \   000000   252D352E     DB "%-5.2f"
   \            326600  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%x">`:
   \   000000   257800       DB "%x"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TEMP:">`:
   \   000000   54454D50     DB "TEMP:"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " C\\000">`:
   \   000000   20430000     DB 20H, 43H, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "GAS :">`:
   \   000000   47415320     DB "GAS :"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%\\000">`:
   \   000000   250000       DB 25H, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " GAS:">`:
   \   000000   20474153     DB " GAS:"
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%">`:
   \   000000   2500         DB "%"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant " ">`:
   \   000000   2000         DB " "

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_ffb:
   \   000000   FB0F0000     DD 4091

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_41a3c28f:
   \   000000   8FC2A341     DD 41A3C28FH
    591          
    592          /*********************************************************************
    593           * @fn      SampleApp_Send_P2P_Message
    594           *
    595           * @brief   point to point.
    596           *
    597           * @param   none
    598           *
    599           * @return  none
    600           */
    601          /*void SampleApp_Send_P2P_Message( void )
    602          {
    603            char str[4];
    604            char str1[5];
    605            char strTemp[12];
    606            char strGas[12];
    607            char TempGas[14];
    608            float temp;
    609            int Gas;
    610          
    611            temp = floatReadDs18B20();              //读取温度数据
    612            Gas  = ReadGasData();                   //模拟值读取函数
    613            sprintf(str, "%4.1f", temp);
    614            sprintf(str1, "%-5.2f", (Gas-8)/1.28); //将浮点数转成字符串
    615            
    616            if(Gas>15)
    617            {RLED = !RLED; GLED = 0; BEEP = !BEEP;}
    618            else
    619            {RLED = 0; GLED = 1; BEEP = 1;}
    620                 
    621            HalUARTWrite(0, "TEMP:", 5);           //串口输出提示信息
    622            HalUARTWrite(0, str, 4);
    623            HalUARTWrite(0, "   ",3);
    624            HalUARTWrite(0, "GAS:",4);
    625            HalUARTWrite(0, str1, 4);
    626            HalUARTWrite(0, "%", 1);
    627            HalUARTWrite(0, "\r\n",2);
    628          
    629            osal_memcpy(strTemp, "TEMP:", 5);
    630            osal_memcpy(&strTemp[5], str, 4);
    631            osal_memcpy(&strTemp[9], " C\0", 3);
    632            
    633            osal_memcpy(strGas, "GAS :", 5);
    634            osal_memcpy(&strGas[5], str1, 5);
    635            osal_memcpy(&strGas[10], "%\0", 2);
    636            
    637            osal_memcpy(&TempGas[0], str, 4);
    638            osal_memcpy(&TempGas[4], " GAS:",5);
    639            osal_memcpy(&TempGas[9], str1, 5);
    640            
    641            
    642            
    643            HalLcdWriteString(strTemp, HAL_LCD_LINE_3);
    644            HalLcdWriteString(strGas , HAL_LCD_LINE_4);//LCD显示
    645            
    646             
    647            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    648                                 SAMPLEAPP_P2P_CLUSTERID,
    649                                 14,
    650                                 TempGas,
    651                                 &SampleApp_TransID,
    652                                 AF_DISCV_ROUTE,
    653                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
    654            {
    655            }
    656            else
    657            {
    658              // Error occurred in request to send.
    659            }
    660            osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    661                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
    662          }*/
    663          /*********************************************************************
    664          *********************************************************************/
    665          
    666          
    667          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     ReadGasData                        0      0     95
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             0      0     28
       -> osal_memset                   0      0     26
       -> osal_memcpy                   0      0     32
       -> HalUARTWrite                  0      0     26
       -> HalLedBlink                   0      0     26
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_SendPeriodicMessage
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      2      0    100
       -> floatReadDs18B20              0      0    158
       -> ReadGasData                   0      0    158
       -> AF_DataRequest                0      0    176
       -> sprintf                       0      0    166
       -> sprintf                       0      0    166
       -> NLME_GetShortAddr             0      0    158
       -> sprintf                       0      0    162
       -> HalUARTWrite                  0      0    158
       -> osal_memcpy                   0      0    164
       -> osal_memcpy                   0      0    164
       -> osal_memcpy                   0      0    164
       -> osal_memcpy                   0      0    164
       -> osal_memcpy                   0      0    164
       -> osal_memcpy                   0      0    164
       -> osal_memcpy                   0      0    164
       -> osal_memcpy                   0      0    164
       -> osal_memcpy                   0      0    164
       -> osal_memcpy                   0      0    164
       -> osal_memcpy                   0      0    164
       -> osal_memcpy                   0      0    164
       -> HalLcdWriteString             0      0    158
       -> HalLcdWriteString             0      0    158
       -> AF_DataRequest                0      0    176


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P1                                    1
     ADCCON1                                  1
     ADCCON3                                  1
     ADCL                                     1
     ADCH                                     1
     ADCCFG                                   1
     P0SEL                                    1
     SampleApp_ClusterList                    4
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_P2P_DstAddr                   12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     TIM_conter                               1
     BEEP_Flag                                1
     ReadGasData                            110
     SampleApp_Init                         164
     ?Subroutine0                             5
     ??Subroutine3_0                          6
     SampleApp_ProcessEvent                 176
     SampleApp_HandleKeys                    59
     ?Subroutine1                             5
     SampleApp_MessageMSGCB                 197
     ?Subroutine2                             4
     SampleApp_SendPeriodicMessage          797
     SampleApp_SendFlashMessage             121
     ??ReadGasData?relay                      6
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SampleApp_SendFlashMessage?relay       6
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant "UNUSUAL">                    8
     ?<Constant "w">                          1
     ?<Constant "%2.1f">                      6
     ?<Constant "%-5.2f">                     7
     ?<Constant "%x">                         3
     ?<Constant "TEMP:">                      6
     ?<Constant " C\000">                     4
     ?<Constant "GAS :">                      6
     ?<Constant "%\000">                      3
     ?<Constant " GAS:">                      6
     ?<Constant "%">                          2
     ?<Constant " ">                          2
     __Constant_0                             4
     __Constant_ffb                           4
     __Constant_41a3c28f                      4

 
 1 644 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
     7 bytes in segment SFR_AN
   100 bytes in segment XDATA_ROM_C
    67 bytes in segment XDATA_Z
 
 1 686 bytes of CODE  memory
    88 bytes of CONST memory (+ 12 bytes shared)
     0 bytes of DATA  memory (+  7 bytes shared)
    67 bytes of XDATA memory

Errors: none
Warnings: 1
